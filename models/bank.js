// Generated by CoffeeScript 1.10.0
(function() {
  var MarketHelper, _, math;

  MarketHelper = void 0;

  math = void 0;

  _ = void 0;

  MarketHelper = require('../lib/market_helper');

  _ = require('underscore');

  math = require('../lib/math');

  module.exports = function(sequelize, DataTypes) {
    var Bank;
    Bank = sequelize.define("Bank", {
      id: {
        type: DataTypes.STRING(255),
        allowNull: false
      },
      RoutingCode: {
        type: DataTypes.STRING(64),
        allowNull: true
      },
      Name: {
        type: DataTypes.STRING(128),
        allowNull: true
      },
      Number: {
        type: DataTypes.STRING(64),
        allowNull: true,
        unique: true
      },
      IBAN: {
        type: DataTypes.STRING(64),
        allowNull: true,
        unique: true
      },
      BankName: {
        type: DataTypes.STRING(64),
        allowNull: true
      },
      BankAddress: {
        type: DataTypes.STRING(64),
        allowNull: true
      },
      SortCode: {
        type: DataTypes.STRING(64),
        allowNull: true
      },
      RoutingNumber: {
        type: DataTypes.STRING(64),
        allowNull: true
      },
      SWIFT: {
        type: DataTypes.STRING(64),
        allowNull: true
      },
      IFSC: {
        type: DataTypes.STRING(64),
        allowNull: true
      },
      bankCountry: {
        type: DataTypes.STRING(64),
        allowNull: true
      },
      bankCity: {
        type: DataTypes.STRING(64),
        allowNull: true
      },
      bankPostalCode: {
        type: DataTypes.STRING(10),
        allowNull: true
      },
      preferredCurrency: {
        type: DataTypes.STRING(64),
        allowNull: true
      }
    }, {
      tableName: 'bank',
      timestamps: false,
      getterMethods: {
        account: function() {
          return 'bank_' + this.user_id;
        }
      },
      classMethods: {
        findById: function(userId, callback) {
          if (callback == null) {
            callback = function() {};
          }
          return Bank.find({
            where: {
              id: userId
            }
          }).complete(callback);
        },
        setName: function(name, callback) {
          if (callback == null) {
            callback = function() {};
          }
          Bank.Name = name;
          return Bank.Name.save().complete(callback);
        },
        createNewBank: function(data, callback) {
          var bankData;
          bankData = _.extend({}, data);
          return Bank.create(bankData).complete(callback);
        }
      },
      instanceMethods: {
        updateAttributes: function(data, callback) {
          if (callback == null) {
            callback = function() {};
          }
          if ((data.name != null) && data.name !== this.name) {
            this.Name = data.name;
          }
          if ((data.bank_name != null) && data.bank_name !== this.bank_name) {
            this.BankName = data.bank_name;
          }
          if ((data.swift != null) && data.swift !== this.swift) {
            this.SWIFT = data.swift;
          }
          if ((data.iban != null) && data.iban !== this.iban) {
            this.IBAN = data.iban;
          }
          if ((data.bank_address != null) && data.bank_address !== this.bank_address) {
            this.BankAddress = data.bank_address;
          }
          if ((data.country != null) && data.country !== this.country) {
            this.bankCountry = data.country;
          }
          if ((data.bank_city != null) && data.bank_city !== this.bank_city) {
            this.bankCity = data.bank_city;
          }
          if ((data.bank_post_code != null) && data.bank_post_code !== this.bank_post_code) {
            this.bankPostalCode = data.bank_post_code;
          }
          if ((data.preferred_currency != null) && data.preferred_currency !== this.preferred_currency) {
            this.preferredCurrency = data.preferred_currency;
          }
          return this.save().complete(callback);
        }
      }
    });
    return Bank;
  };

}).call(this);
