// Generated by CoffeeScript 1.10.0
(function() {
  $(document).ready(function() {
    var $changePassForm, $email, $hint, $loginForm, $logoutBt, $pwField, $sendPassForm, $setNewPassForm, $signupForm, onAuthSubmit, setStrength, setText, submitAuthForm;
    $signupForm = $("#signup-form");
    $loginForm = $("#login-form");
    $changePassForm = $("#change-pass-form");
    $setNewPassForm = $("#set-new-pass-form");
    $sendPassForm = $("#send-pass-form");
    $logoutBt = $("#logout-bt");
    $pwField = $signupForm.find("[name='password']");
    $hint = $("#hint");
    $email = $("#signup-email");
    $.validator.addMethod("onenumber", function(value, element) {
      var pattern;
      pattern = /[0-9]{1,}/;
      return this.optional(element) || pattern.test(value);
    }, "The password should contain at least one number.");
    $email.on("blur", function() {
      return $(this).mailcheck({
        suggested: function(element, suggestion) {
          if (!$hint.html()) {
            suggestion = "Did you mean <span class='suggestion'>" + "<span class='address'>" + suggestion.address + "</span>" + "@<a href='#' class='domain'>" + suggestion.domain + "</a></span>?";
            return $hint.html(suggestion).show();
          } else {
            $(".address").html(suggestion.address);
            return $(".domain").html(suggestion.domain);
          }
        },
        empty: function(element) {
          return $hint.empty().hide();
        }
      });
    });
    $hint.on("click", ".domain", function() {
      $email.val($(".suggestion").text());
      return $hint.empty().hide();
    });
    onAuthSubmit = function(ev) {
      var $form;
      ev.preventDefault();
      $form = $(ev.target);
      return submitAuthForm($form);
    };
    submitAuthForm = function($form) {
      var url, user;
      $form.find("#error-cnt").text("");
      url = $form.attr("action");
      user = new App.UserModel({
        email: $form.find("[name='email']").val(),
        password: $form.find("[name='password']").val(),
        gauth_pass: $form.find("[name='gauth_pass']").val()
      });
      user.url = "" + url;
      return user.save(null, {
        success: function() {
          if (url !== "/login") {
            user.url = "/login";
            return user.save(null, {
              success: function() {
                return window.location = "/settings/profile/edit";
              }
            });
          } else {
            return window.location = "/";
          }
        },
        error: function(model, response) {
          if (response.responseJSON && response.responseJSON.error) {
            return $form.find("#error-cnt").text(response.responseJSON.error);
          } else {
            return $form.find("#error-cnt").text("Invalid credentials.");
          }
        }
      });
    };
    setStrength = function(number) {
      return $("#password-strength").removeClass().addClass("" + number + "");
    };
    setText = function(text) {
      return $("#strength-text").html(text);
    };
    $pwField.keyup(function() {
      var result, score;
      result = zxcvbn($pwField.val());
      score = result.score;
      switch (score) {
        case 0:
          setStrength("veryweak");
          return setText("Very weak password");
        case 1:
          setStrength("weak");
          return setText("Weak password");
        case 2:
          setStrength("adequate");
          return setText("Adequate password");
        case 3:
          setStrength("prettygood");
          return setText("Pretty good password");
        case 4:
          setStrength("excellent");
          return setText("Excellent password");
      }
    });
    if ($signupForm.length) {
      $signupForm.validate({
        rules: {
          password: {
            required: true,
            minlength: 8,
            onenumber: true
          },
          repeat_password: {
            required: true,
            minlength: 8,
            equalTo: "#signup-password"
          },
          email: {
            required: true,
            email: true
          }
        },
        messages: {
          password: {
            required: "Please provide a password.",
            minlength: "Your password must be at least 8 characters long."
          },
          repeat_password: {
            required: "Please provide a password.",
            minlength: "Your password must be at least 8 characters long.",
            equalTo: "Please enter the same password as above."
          },
          email: "Please enter a valid email address."
        },
        submitHandler: function() {
          submitAuthForm($signupForm);
          return false;
        }
      });
    }
    if ($changePassForm) {
      $changePassForm.validate({
        rules: {
          password: {
            required: true,
            minlength: 8,
            onenumber: true
          },
          repeat_password: {
            required: true,
            minlength: 8,
            equalTo: "#change-pass-new-pass"
          }
        },
        messages: {
          password: {
            required: "Please provide a password.",
            minlength: "Your password must be at least 8 characters long."
          },
          repeat_password: {
            required: "Please provide a password.",
            minlength: "Your password must be at least 8 characters long.",
            equalTo: "Please enter the same password as above."
          }
        }
      });
    }
    if ($setNewPassForm) {
      $setNewPassForm.validate({
        rules: {
          password: {
            required: false
          },
          new_password: {
            required: true,
            minlength: 8,
            onenumber: true
          },
          repeat_new_password: {
            required: true,
            minlength: 8,
            equalTo: "#set-new-pass"
          }
        },
        messages: {
          password: {
            required: "Please provide current password"
          },
          new_password: {
            required: "Please provide a new password.",
            minlength: "Your password must be at least 8 characters long."
          },
          repeat_new_password: {
            required: "Please provide a password.",
            minlength: "Your password must be at least 8 characters long.",
            equalTo: "Please enter the same password as above."
          }
        },
        submitHandler: function() {
          var $form, url, user;
          $form = $setNewPassForm;
          $form.find("#error-cnt").text("");
          url = $form.attr("action");
          user = new App.UserModel({
            password: $form.find("[name='password']").val(),
            new_password: $form.find("[name='new_password']").val()
          });
          user.url = "" + url;
          user.save(null, {
            success: function() {
              return $form.find("#notice-cnt").text("The password was successfully changed.");
            },
            error: function(model, response) {
              if (response.responseJSON && response.responseJSON.error) {
                return $form.find("#error-cnt").text(response.responseJSON.error);
              }
            }
          });
          return false;
        }
      });
    }
    if ($sendPassForm) {
      $sendPassForm.validate({
        rules: {
          email: {
            required: true,
            email: true
          }
        },
        messages: {
          email: "Please enter a valid email address."
        }
      });
    }
    if ($loginForm.length) {
      $loginForm.submit(onAuthSubmit);
    }
    if ($logoutBt.length) {
      return $logoutBt.click(function(ev) {
        ev.preventDefault();
        return $.get($logoutBt.attr("href"), function() {
          return window.location = "/";
        });
      });
    }
  });

}).call(this);
