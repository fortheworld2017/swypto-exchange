// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.ChatView = (function(superClass) {
    extend(ChatView, superClass);

    function ChatView() {
      this.onSendClick = bind(this.onSendClick, this);
      this.onMessageTyping = bind(this.onMessageTyping, this);
      return ChatView.__super__.constructor.apply(this, arguments);
    }

    ChatView.prototype.tpl = "chat-message-tpl";

    ChatView.prototype.chatSocketUrl = null;

    ChatView.prototype.messageHistoryRootUrl = null;

    ChatView.prototype.events = {
      "keydown #chat-message-box": "onMessageTyping",
      "click #send-message-bt": "onSendClick"
    };

    ChatView.prototype.initialize = function(arg) {
      this.user = arg.user, this.chatSocketUrl = arg.chatSocketUrl, this.messageHistoryRootUrl = arg.messageHistoryRootUrl;
      return this.chatSocketUrl != null ? this.chatSocketUrl : this.chatSocketUrl = "/chat";
    };

    ChatView.prototype.render = function() {
      this.loadHistory();
      this.socket = io.connect(this.chatSocketUrl);
      this.socket.on("connect", (function(_this) {
        return function() {};
      })(this));
      return this.socket.on("new-message", (function(_this) {
        return function(data) {
          return _this.renderMessage(data);
        };
      })(this));
    };

    ChatView.prototype.loadHistory = function() {
      var messagesCollection;
      messagesCollection = new App.ChatMessagesCollection(null, {
        room: this.room
      });
      if (this.messageHistoryRootUrl) {
        messagesCollection.rootUrl = this.messageHistoryRootUrl;
      }
      return messagesCollection.fetch({
        success: (function(_this) {
          return function() {
            return messagesCollection.each(function(message) {
              return _this.renderMessage(message, "prepend");
            });
          };
        })(this)
      });
    };

    ChatView.prototype.renderMessage = function(message, mode) {
      var $message;
      if (message == null) {
        message = {};
      }
      if (mode == null) {
        mode = "append";
      }
      if (!(message instanceof App.ChatMessageModel)) {
        message = new App.ChatMessageModel(message);
      }
      $message = $(this.template({
        message: message
      }));
      this.$("#messages-list")[mode]($message);
      return this.scrollMessageList();
    };

    ChatView.prototype.scrollMessageList = function() {
      return this.$("#messages-list").scrollTop(1000000000);
    };

    ChatView.prototype.sendMessage = function() {
      var $messageBox, messageText;
      $messageBox = this.$("#chat-message-box");
      messageText = _.str.trim($messageBox.val());
      if (messageText.length) {
        this.socket.emit("add-message", {
          room: this.room,
          username: this.user.get("username"),
          message: messageText
        });
        return $messageBox.val("");
      }
    };

    ChatView.prototype.onMessageTyping = function(ev) {
      if (ev.keyCode === 13) {
        ev.preventDefault();
        return this.sendMessage();
      }
    };

    ChatView.prototype.onSendClick = function(ev) {
      ev.preventDefault();
      return this.sendMessage();
    };

    return ChatView;

  })(App.MasterView);

}).call(this);
