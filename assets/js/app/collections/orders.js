// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.App.OrdersCollection = (function(superClass) {
    extend(OrdersCollection, superClass);

    function OrdersCollection() {
      return OrdersCollection.__super__.constructor.apply(this, arguments);
    }

    OrdersCollection.prototype.type = null;

    OrdersCollection.prototype.currency1 = null;

    OrdersCollection.prototype.currency2 = null;

    OrdersCollection.prototype.published = null;

    OrdersCollection.prototype.url = function() {
      var params, url;
      url = "/orders";
      params = {};
      if (this.type) {
        params.status = this.type;
      }
      if (this.action) {
        params.action = this.action;
      }
      if (this.currency1) {
        params.currency1 = this.currency1;
      }
      if (this.currency2) {
        params.currency2 = this.currency2;
      }
      if (this.published != null) {
        params.published = this.published;
      }
      if (this.userId) {
        params.user_id = this.userId;
      }
      if (this.orderBy) {
        params.sort_by = this.orderBy;
      }
      url += "?" + ($.param(params));
      return url;
    };

    OrdersCollection.prototype.model = window.App.OrderModel;

    OrdersCollection.prototype.initialize = function(models, options) {
      if (options == null) {
        options = {};
      }
      this.type = options.type;
      this.action = options.action;
      this.currency1 = options.currency1;
      this.currency2 = options.currency2;
      this.published = options.published;
      this.userId = options.userId;
      return this.orderBy = options.orderBy;
    };

    OrdersCollection.prototype.calculateVolume = function() {
      var total;
      total = 0;
      this.each(function(order) {
        return total = App.math.add(total, order.calculateFirstNoFeeAmount());
      });
      return _.str.satoshiRound(total);
    };

    OrdersCollection.prototype.calculateVolumeForPriceLimit = function(unitPrice) {
      var totalAmount;
      unitPrice = _.str.satoshiRound(unitPrice);
      totalAmount = 0;
      this.each(function(order) {
        var orderPrice;
        orderPrice = _.str.satoshiRound(order.get("unit_price"));
        if (orderPrice <= unitPrice) {
          totalAmount = App.math.add(totalAmount, order.calculateFirstNoFeeAmount());
        }
        if (orderPrice > unitPrice) {

        }
      });
      return _.str.satoshiRound(totalAmount);
    };

    OrdersCollection.prototype.getStacked = function() {
      var stackedOrders;
      stackedOrders = {};
      this.each(function(order) {
        var stackId, unitPrice;
        unitPrice = _.str.toFixed(order.get("unit_price"));
        stackId = "id-" + unitPrice;
        if (!stackedOrders[stackId]) {
          stackedOrders[stackId] = new App.OrderModel;
        }
        return stackedOrders[stackId].mergeWithOrder(order);
      });
      return _.values(stackedOrders);
    };

    OrdersCollection.prototype.getIds = function() {
      var ids;
      ids = [];
      this.each(function(order) {
        return ids.push(order.id);
      });
      return ids;
    };

    return OrdersCollection;

  })(Backbone.Collection);

}).call(this);
