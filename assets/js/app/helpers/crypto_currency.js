// Generated by CoffeeScript 1.9.3
(function() {
  window.App = window.App || {};

  window.App.Helpers = window.App.Helpers || {};

  window.App.Helpers.CryptoCurrency = {
    isValidAddress: function(address) {
      var decoded;
      if (address === "Bank Account") {
        return true;
      } else {
        decoded = this.base58_decode(address);
        if (!(decoded.length === 25 || address === "Bank Account")) {
          return false;
        }
        return true;
      }
    },
    base58_decode: function(string) {
      var c, hex, i, l, long_value, nPad, num_58, output, str, table, table_rev;
      table = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
      table_rev = new Array();
      i = void 0;
      i = 0;
      while (i < 58) {
        table_rev[table[i]] = int2bigInt(i, 8, 0);
        i++;
      }
      l = string.length;
      long_value = int2bigInt(0, 1, 0);
      num_58 = int2bigInt(58, 8, 0);
      c = void 0;
      i = 0;
      while (i < l) {
        c = string[l - i - 1];
        long_value = add(long_value, mult(table_rev[c], this.pow(num_58, i)));
        i++;
      }
      hex = bigInt2str(long_value, 16);
      str = this.hex2a(hex);
      nPad = void 0;
      nPad = 0;
      while (string[nPad] === table[0]) {
        nPad++;
      }
      output = str;
      if (nPad > 0) {
        output = this.repeat("\u0000", nPad) + str;
      }
      return output;
    },
    hex2a: function(hex) {
      var i, str;
      str = "";
      i = 0;
      while (i < hex.length) {
        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
        i += 2;
      }
      return str;
    },
    pow: function(big, exp) {
      var i, newbig;
      if (exp === 0) {
        return int2bigInt(1, 1, 0);
      }
      i = void 0;
      newbig = big;
      i = 1;
      while (i < exp) {
        newbig = mult(newbig, big);
        i++;
      }
      return newbig;
    },
    repeat: function(s, n) {
      var a;
      a = [];
      while (a.length < n) {
        a.push(s);
      }
      return a.join("");
    }
  };

}).call(this);
