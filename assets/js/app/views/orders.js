// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.OrdersView = (function(superClass) {
    extend(OrdersView, superClass);

    function OrdersView() {
      this.onOrderToAdd = bind(this.onOrderToAdd, this);
      this.onOrderToCancel = bind(this.onOrderToCancel, this);
      this.onOrderCanceled = bind(this.onOrderCanceled, this);
      this.onOrderPartiallyCompleted = bind(this.onOrderPartiallyCompleted, this);
      this.onOrderCompleted = bind(this.onOrderCompleted, this);
      this.onNewOrder = bind(this.onNewOrder, this);
      return OrdersView.__super__.constructor.apply(this, arguments);
    }

    OrdersView.prototype.tpl = null;

    OrdersView.prototype.collection = null;

    OrdersView.prototype.hideOnEmpty = false;

    OrdersView.prototype.events = {
      "click .cancel": "onCancelClick"
    };

    OrdersView.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      if (options.tpl) {
        this.tpl = options.tpl;
      }
      if (options.$totalsEl) {
        this.$totalsEl = options.$totalsEl;
      }
      if (options.hideOnEmpty) {
        this.hideOnEmpty = options.hideOnEmpty;
      }
      $.subscribe("new-order", this.onNewOrder);
      $.subscribe("order-completed", this.onOrderCompleted);
      $.subscribe("order-partially-completed", this.onOrderPartiallyCompleted);
      $.subscribe("order-to-cancel", this.onOrderToCancel);
      $.subscribe("order-canceled", this.onOrderCanceled);
      return $.subscribe("order-to-add", this.onOrderToAdd);
    };

    OrdersView.prototype.render = function() {
      return this.collection.fetch({
        success: (function(_this) {
          return function() {
            _this.renderOrders();
            if (_this.$totalsEl) {
              _this.renderVolume();
            }
            if (_this.hideOnEmpty) {
              _this.toggleVisible();
            }
            if (_this.collection.length < 1) {
              return _this.disableExcel();
            }
          };
        })(this)
      });
    };

    OrdersView.prototype.renderOrders = function() {
      return this.collection.each((function(_this) {
        return function(order) {
          var $existentOrder, tpl;
          $existentOrder = _this.$("[data-id='" + order.id + "']");
          tpl = _this.template({
            order: order
          });
          if (!$existentOrder.length) {
            _this.$el.append(tpl);
          }
          if ($existentOrder.length) {
            return $existentOrder.replaceWith(tpl);
          }
        };
      })(this));
    };

    OrdersView.prototype.clearDeletedOrders = function() {
      var existentOrderIds, i, len, ref, results, row;
      existentOrderIds = this.collection.getIds();
      ref = this.$(".order-row");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        row = ref[i];
        if (existentOrderIds.indexOf($(row).data("id")) === -1) {
          results.push($(row).remove());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    OrdersView.prototype.renderVolume = function() {
      return this.$totalsEl.text(this.collection.calculateVolume());
    };

    OrdersView.prototype.onNewOrder = function(ev, order) {
      return this.render();
    };

    OrdersView.prototype.onOrderCompleted = function(ev, order) {
      var $existentOrder;
      $existentOrder = this.$("[data-id='" + order.id + "']");
      if ($existentOrder.length) {
        $existentOrder.addClass("highlight");
        return setTimeout(function() {
          if ($existentOrder.length) {
            return $existentOrder.remove();
          }
        }, 1000);
      }
    };

    OrdersView.prototype.onOrderPartiallyCompleted = function(ev, order) {
      var $existentOrder;
      $existentOrder = this.$("[data-id='" + order.id + "']");
      if ($existentOrder.length) {
        $existentOrder.addClass("highlight");
        $existentOrder.find(".trade-price").text(_.str.toFixed(order.get("unit_price")));
        $existentOrder.find(".trade-amount").text(_.str.toFixed(order.calculateFirstNoFeeAmount()));
        $existentOrder.find(".trade-total").text(_.str.toFixed(order.calculateSecondNoFeeAmount()));
        return setTimeout(function() {
          if ($existentOrder.length) {
            return $existentOrder.removeClass("highlight");
          }
        }, 1000);
      }
    };

    OrdersView.prototype.onOrderCanceled = function(ev, data) {
      return this.render();
    };

    OrdersView.prototype.onOrderToCancel = function(ev, data) {
      return this.render();
    };

    OrdersView.prototype.onOrderToAdd = function(ev, data) {
      return this.render();
    };

    OrdersView.prototype.onCancelClick = function(ev) {
      var $target, order;
      ev.preventDefault();
      if (confirm("Are you sure?")) {
        $target = $(ev.target);
        $target.attr("disabled", true);
        $target.text("Pending...");
        window.location.reload(false);
        order = new App.OrderModel({
          id: $(ev.target).data("id")
        });
        return order.destroy({
          success: (function(_this) {
            return function() {};
          })(this),
          error: function(m, xhr) {
            $.publish("error", xhr);
            $target.attr("disabled", false);
            return $target.text("Cancel");
          }
        });
      }
    };

    OrdersView.prototype.disableExcel = function() {
      var $exportClosedOrders;
      $exportClosedOrders = $('#export-excel-closed');
      if ($exportClosedOrders.length > 0) {
        return $exportClosedOrders.hide();
      }
    };

    return OrdersView;

  })(App.MasterView);

}).call(this);
