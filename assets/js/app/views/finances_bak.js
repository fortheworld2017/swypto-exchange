// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.FinancesView = (function(superClass) {
    extend(FinancesView, superClass);

    function FinancesView() {
      this.onWalletBalanceChanged = bind(this.onWalletBalanceChanged, this);
      this.onWalletBalanceLoaded = bind(this.onWalletBalanceLoaded, this);
      this.onPaymentProcessed = bind(this.onPaymentProcessed, this);
      return FinancesView.__super__.constructor.apply(this, arguments);
    }

    FinancesView.prototype.events = {
      "submit #add-wallet-form": "onAddWallet",
      "click #show-qr-bt": "onShowQrAddress",
      "click #generate-address": "onGenerateAddress",
      "click [data-wallet-available-balance-id]": "onAvailableBalanceClick"
    };

    FinancesView.prototype.initialize = function(options) {
      $.subscribe("payment-processed", this.onPaymentProcessed);
      $.subscribe("wallet-balance-loaded", this.onWalletBalanceLoaded);
      return $.subscribe("wallet-balance-changed", this.onWalletBalanceChanged);
    };

    FinancesView.prototype.render = function() {
      this.renderCopyButton();
      return this.setupFormValidators();
    };

    FinancesView.prototype.renderCopyButton = function() {
      var $copyButton, $showQrBt;
      $copyButton = this.$("#copy-address");
      $showQrBt = this.$("#show-qr-bt");
      if ($copyButton.length && $copyButton.attr("data-clipboard-text").length) {
        new ZeroClipboard($copyButton[0], {
          moviePath: window.location.origin + "/ZeroClipboard.swf"
        });
        $copyButton.show();
        return $showQrBt.show();
      } else {
        $copyButton.hide();
        return $showQrBt.hide();
      }
    };

    FinancesView.prototype.renderQrAddress = function($qrCnt) {
      $qrCnt.empty();
      return new QRCode($qrCnt[0], $qrCnt.attr("data-address"));
    };

    FinancesView.prototype.renderWalletBalance = function(walletId) {
      var wallet;
      wallet = new App.WalletModel({
        id: walletId
      });
      return wallet.fetch({
        success: (function(_this) {
          return function() {
            _this.$("[data-wallet-balance-id='" + walletId + "']").html(_.str.toFixed(wallet.get("balance") + wallet.get("hold_balance")));
            _this.$("[data-wallet-hold-balance-id='" + walletId + "']").text(_.str.toFixed(wallet.get("hold_balance")));
            return _this.$("[data-wallet-available-balance-id='" + walletId + "']").text(_.str.toFixed(wallet.get("balance")));
          };
        })(this)
      });
    };

    FinancesView.prototype.setupFormValidators = function() {
      $.validator.addMethod("cryptoAddress", function(value, element) {
        return App.Helpers.CryptoCurrency.isValidAddress(value);
      });
      return this.$("#withdraw-form").validate({
        rules: {
          amount: {
            required: true,
            number: true,
            min: 0.000001
          },
          address: {
            required: true,
            cryptoAddress: true
          }
        },
        messages: {
          amount: {
            required: "Please provide an amount."
          },
          address: {
            required: "Please provide an address.",
            cryptoAddress: "Please provide a valid address."
          }
        },
        submitHandler: (function(_this) {
          return function(form) {
            _this.onPay(form);
            return false;
          };
        })(this)
      });
    };

    FinancesView.prototype.onAddWallet = function(ev) {
      var $form, wallet;
      ev.preventDefault();
      $form = $(ev.target);
      $form.find("button").attr("disabled", true);
      wallet = new App.WalletModel({
        currency: $form.find("#currency-type").val()
      });
      return wallet.save(null, {
        success: function() {
          return window.location.reload();
        },
        error: function(m, xhr) {
          $.publish("error", xhr);
          return $form.find("button").attr("disabled", false);
        }
      });
    };

    FinancesView.prototype.onShowQrAddress = function(ev) {
      var $qrCnt;
      ev.preventDefault();
      $qrCnt = this.$("#qr-address-cnt");
      if ($qrCnt.is(":empty")) {
        return this.renderQrAddress($qrCnt);
      } else {
        return $qrCnt.toggle();
      }
    };

    FinancesView.prototype.onGenerateAddress = function(ev) {
      var $target, wallet;
      ev.preventDefault();
      $target = $(ev.target);
      wallet = new App.WalletModel({
        id: $target.data("id")
      });
      return wallet.save({
        address: "pending"
      }, {
        success: (function(_this) {
          return function() {
            var $addressRow, $copyButton, $qrAddressCnt, $showQrBt;
            $copyButton = _this.$("#copy-address");
            $addressRow = _this.$("#address-row");
            $qrAddressCnt = _this.$("#qr-address-cnt");
            $showQrBt = _this.$("#show-qr-bt");
            $copyButton.attr("data-clipboard-text", wallet.get("address"));
            $addressRow.text(wallet.get("address"));
            $qrAddressCnt.attr("data-address", wallet.get("address"));
            $copyButton.show();
            $showQrBt.show();
            _this.renderCopyButton();
            return _this.$("#generate-address").remove();
          };
        })(this),
        error: function(m, xhr) {
          return $.publish("error", xhr);
        }
      });
    };

    FinancesView.prototype.onPay = function(form) {
      var $form, amount, payment;
      $form = $(form);
      amount = _.str.satoshiRound($form.find("[name='amount']").val());
      if (_.isNumber(amount) && amount > 0) {
        $form.find("button").attr("disabled", true);
        payment = new App.PaymentModel({
          wallet_id: $form.find("[name='wallet_id']").val(),
          amount: amount,
          address: $form.find("[name='address']").val()
        });
        return payment.save(null, {
          success: function() {
            $form.find("button").attr("disabled", false);
            $.publish("notice", "Your withdrawal will be processed soon.");
            return $.publish("payment-submited", payment);
          },
          error: function(m, xhr) {
            $form.find("button").attr("disabled", false);
            return $.publish("error", xhr);
          }
        });
      } else {
        return $.publish("error", "Please submit a proper amount.");
      }
    };

    FinancesView.prototype.onAvailableBalanceClick = function(ev) {
      var $target, amount;
      ev.preventDefault();
      $target = $(ev.target);
      amount = _.str.satoshiRound(App.math.add(parseFloat($target.text()), -parseFloat($target.data("withdrawal-fee"))));
      return $("#withdrawal-amount").val(amount);
    };

    FinancesView.prototype.onPaymentProcessed = function(ev, payment) {
      return this.renderWalletBalance(payment.get("wallet_id"));
    };

    FinancesView.prototype.onWalletBalanceLoaded = function(ev, wallet) {
      return this.renderWalletBalance(wallet.id);
    };

    FinancesView.prototype.onWalletBalanceChanged = function(ev, wallet) {
      return this.renderWalletBalance(wallet.id);
    };

    return FinancesView;

  })(App.MasterView);

}).call(this);
