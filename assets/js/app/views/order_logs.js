// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.OrderLogsView = (function(superClass) {
    extend(OrderLogsView, superClass);

    function OrderLogsView() {
      this.onOrderPartiallyCompleted = bind(this.onOrderPartiallyCompleted, this);
      this.onOrderCompleted = bind(this.onOrderCompleted, this);
      return OrderLogsView.__super__.constructor.apply(this, arguments);
    }

    OrderLogsView.prototype.tpl = null;

    OrderLogsView.prototype.collection = null;

    OrderLogsView.prototype.hideOnEmpty = false;

    OrderLogsView.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      if (options.tpl) {
        this.tpl = options.tpl;
      }
      if (options.hideOnEmpty) {
        this.hideOnEmpty = options.hideOnEmpty;
      }
      this.toggleVisible();
      $.subscribe("order-completed", this.onOrderCompleted);
      return $.subscribe("order-partially-completed", this.onOrderPartiallyCompleted);
    };

    OrderLogsView.prototype.render = function(method) {
      return this.collection.fetch({
        success: (function(_this) {
          return function() {
            _this.renderOrders(method);
            if (_this.hideOnEmpty) {
              return _this.toggleVisible();
            }
          };
        })(this)
      });
    };

    OrderLogsView.prototype.renderOrders = function(method) {
      if (method == null) {
        method = "append";
      }
      return this.collection.each((function(_this) {
        return function(order) {
          var $existentOrder, tpl;
          $existentOrder = _this.$("[data-id='" + order.id + "']");
          tpl = _this.template({
            order: order
          });
          if (!$existentOrder.length) {
            _this.$el[method](tpl);
          }
          if ($existentOrder.length) {
            return $existentOrder.replaceWith(tpl);
          }
        };
      })(this));
    };

    OrderLogsView.prototype.onOrderCompleted = function(ev, order) {
      return this.render("prepend");
    };

    OrderLogsView.prototype.onOrderPartiallyCompleted = function(ev, order) {
      return this.render("prepend");
    };

    return OrderLogsView;

  })(App.MasterView);

}).call(this);
