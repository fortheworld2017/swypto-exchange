// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.OrderBookView = (function(superClass) {
    extend(OrderBookView, superClass);

    function OrderBookView() {
      this.onOrderCanceled = bind(this.onOrderCanceled, this);
      this.onOrderMatched = bind(this.onOrderMatched, this);
      this.onNewOrder = bind(this.onNewOrder, this);
      return OrderBookView.__super__.constructor.apply(this, arguments);
    }

    OrderBookView.prototype.tpl = null;

    OrderBookView.prototype.collection = null;

    OrderBookView.prototype.events = {
      "click .order-book-order": "onOrderClick"
    };

    OrderBookView.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      if (options.tpl) {
        this.tpl = options.tpl;
      }
      if (options.$totalsEl) {
        this.$totalsEl = options.$totalsEl;
      }
      $.subscribe("new-order", this.onNewOrder);
      $.subscribe("order-completed", this.onOrderMatched);
      $.subscribe("order-partially-completed", this.onOrderMatched);
      return $.subscribe("order-canceled", this.onOrderCanceled);
    };

    OrderBookView.prototype.render = function() {
      return this.collection.fetch({
        success: (function(_this) {
          return function() {
            var i, len, order, ref;
            _this.$el.empty();
            ref = _this.collection.getStacked();
            for (i = 0, len = ref.length; i < len; i++) {
              order = ref[i];
              _this.$el.append(_this.template({
                order: order
              }));
            }
            if (_this.$totalsEl) {
              return _this.renderVolume();
            }
          };
        })(this)
      });
    };

    OrderBookView.prototype.renderVolume = function() {
      return this.$totalsEl.text(_.str.toFixed(this.collection.calculateVolume()));
    };

    OrderBookView.prototype.onNewOrder = function(ev, order) {
      return this.render();
    };

    OrderBookView.prototype.onOrderMatched = function(ev, order) {
      var $existentOrder, unitPrice;
      unitPrice = _.str.toFixed(order.get("unit_price"));
      $existentOrder = this.$("[data-unit-price='" + unitPrice + "']");
      if ($existentOrder.length) {
        $existentOrder.addClass("highlight");
        return setTimeout((function(_this) {
          return function() {
            if ($existentOrder.length) {
              $existentOrder.removeClass("highlight");
            }
            return _this.render();
          };
        })(this), 1000);
      }
    };

    OrderBookView.prototype.onOrderCanceled = function(ev, data) {
      return this.render();
    };

    OrderBookView.prototype.onOrderClick = function(ev) {
      var $row, action, order, unitPrice;
      $row = $(ev.currentTarget);
      unitPrice = parseFloat($row.data("unit-price"));
      action = $row.data("action");
      order = new App.OrderModel({
        unit_price: unitPrice,
        action: action,
        amount: this.collection.calculateVolumeForPriceLimit(unitPrice)
      });
      return $.publish("order-book-order-selected", order);
    };

    return OrderBookView;

  })(App.MasterView);

}).call(this);
