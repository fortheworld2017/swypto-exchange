// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.SettingsView = (function(superClass) {
    extend(SettingsView, superClass);

    function SettingsView() {
      return SettingsView.__super__.constructor.apply(this, arguments);
    }

    SettingsView.prototype.tpl = null;

    SettingsView.prototype.model = null;

    SettingsView.prototype.googleAuthModel = null;

    SettingsView.prototype.events = {
      "click #qr-gen-bt": "onQrGenClick",
      "submit #gauth-confirm-disable-form": "onGauthDisableConfirmSubmit",
      "submit #gauth-confirm-enable-form": "onGauthEnableConfirmSubmit",
      "change input[type='checkbox']": "onSettingsChange",
      "blur #name": "onNameBlur"
    };

    SettingsView.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      $.validator.addMethod("username", function(value, element) {
        var pattern;
        pattern = /^[a-zA-Z0-9_]{4,15}$/;
        return this.optional(element) || pattern.test(value);
      }, "The username can have only letters, numbers and underscores.");
      return this.$("#name-update-form").validate({
        rules: {
          name: {
            required: true,
            minlength: 1,
            maxlength: 255,
            username: true
          }
        },
        submitHandler: (function(_this) {
          return function(form, ev) {
            _this.onNameFormSubmit(ev);
            return false;
          };
        })(this)
      });
    };

    SettingsView.prototype.onQrGenClick = function(ev) {
      ev.preventDefault();
      this.googleAuthModel = new App.GoogleAuthModel;
      return this.googleAuthModel.save(null, {
        success: (function(_this) {
          return function() {
            _this.$("#gauth-link").attr("href", _this.googleAuthModel.get("gauth_qr"));
            _this.$("#gauth-qr").attr("src", _this.googleAuthModel.get("gauth_qr"));
            _this.$("#gauth-key").text(_this.googleAuthModel.get("gauth_key"));
            _this.$("#gauth-cnt").removeClass("hidden");
            return $(ev.target).remove();
          };
        })(this),
        error: function(m, xhr) {
          return $.publish("error", xhr);
        }
      });
    };

    SettingsView.prototype.onGauthEnableConfirmSubmit = function(ev) {
      var $form, data;
      ev.preventDefault();
      $form = $(ev.target);
      data = {
        id: Date.now(),
        gauth_pass: $form.find("[name='gauth_pass']").val()
      };
      this.googleAuthModel.set(data);
      return this.googleAuthModel.save(null, {
        success: function() {
          return window.location.reload();
        },
        error: function(m, xhr) {
          return $.publish("error", xhr);
        }
      });
    };

    SettingsView.prototype.onGauthDisableConfirmSubmit = function(ev) {
      var $form, data;
      ev.preventDefault();
      $form = $(ev.target);
      data = {
        id: Date.now(),
        gauth_pass: $form.find("[name='gauth_pass']").val()
      };
      this.googleAuthModel = new App.GoogleAuthModel(data);
      return this.googleAuthModel.destroy({
        data: $.param(data),
        success: function() {
          return window.location.reload();
        },
        error: function(m, xhr) {
          return $.publish("error", xhr);
        }
      });
    };

    SettingsView.prototype.onSettingsChange = function(ev) {
      var $input, data;
      $input = $(ev.target);
      data = {};
      data[$input.attr("name")] = $input.is(":checked");
      return this.model.save(data, {
        success: function() {
          return $.publish("error", "Settings successfully saved.");
        },
        error: function(m, xhr) {
          return $.publish("error", xhr);
        }
      });
    };

    SettingsView.prototype.onNameBlur = function(ev) {
      return this.$("#name-update-form").submit();
    };

    SettingsView.prototype.onNameFormSubmit = function(ev) {
      var $form, data;
      ev.preventDefault();
      $form = $(ev.target);
      this.bank = new App.Bankmodel(data);
      data = {
        Name: $form.find("[name='Name']").val()
      };
      if (bank.Name === this.bank.get("Name")) {
        return;
      }
      return this.bank.save(data, {
        success: function() {
          return $.publish("error", "Name was successfully saved.");
        },
        error: function(m, xhr) {
          return $.publish("error", xhr);
        }
      });
    };

    return SettingsView;

  })(App.MasterView);

}).call(this);
