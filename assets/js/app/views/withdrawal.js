// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.WithdrawalView = (function(superClass) {
    extend(WithdrawalView, superClass);

    function WithdrawalView() {
      return WithdrawalView.__super__.constructor.apply(this, arguments);
    }

    WithdrawalView.prototype.tpl = null;

    WithdrawalView.prototype.model = null;

    WithdrawalView.prototype.currency = null;

    WithdrawalView.prototype.initialize = function(options) {
      if (options.tpl) {
        this.tpl = options.tpl;
      }
      if (options.model) {
        this.model = options.model;
      }
      if (options.currency) {
        this.currency = options.currency;
      }
      if (options.type) {
        this.type = options.type;
      }
      $.subscribe("payment-processed", this.onPaymentProcessed);
      $.subscribe("wallet-balance-loaded", this.onWalletBalanceLoaded);
      return $.subscribe("wallet-balance-changed", this.onWalletBalanceChanged);
    };

    WithdrawalView.prototype.render = function() {
      var content;
      content = this.template({
        payment: this.model,
        type: this.type
      });
      this.$el.html(content);
      ($(this.el)).appendTo('#form-container');
      console.log(this.type);
      if (this.type === 'BTC') {
        this.setupBTCFormValidator();
      }
      if (this.type === 'XWBC') {
        this.setupXWBCFormValidator();
      }
      if (this.type === 'EU') {
        this.setupEuBankFormValidator();
      }
      if (this.type === 'Inter') {
        return this.setupInBankFormValidator();
      }
    };

    WithdrawalView.prototype.setupBTCFormValidator = function() {
      $.validator.addMethod("cryptoAddress", function(value, element) {
        return App.Helpers.CryptoCurrency.isValidAddress(value);
      });
      return this.$("#bitcoin-withdraw-form").validate({
        errorClass: 'lb error',
        rules: {
          amount: {
            required: true,
            number: true,
            min: 0.000001
          },
          address: {
            required: {
              depends: function() {
                $(this).val($.trim($(this).val()));
                return true;
              }
            },
            cryptoAddress: true
          }
        },
        messages: {
          amount: {
            required: "Please provide an amount."
          },
          address: {
            required: "Please provide an address.",
            cryptoAddress: "Please provide a valid address."
          }
        },
        submitHandler: (function(_this) {
          return function(form) {
            var $form, amount, confirmationView;
            $form = $(form);
            amount = _.str.satoshiRound($form.find("[name='amount']").val());
            if (_.isNumber(amount) && amount > 0) {
              $form.find("button").attr("disabled", true);
              _this.model = new App.PaymentModel({
                amount: _.str.satoshiRound($form.find("[name='amount']").val()),
                wallet_id: $form.find("[name='wallet_id']").val(),
                address: $form.find("[name='address']").val(),
                label: $form.find("[name='label']").val()
              });
            }
            confirmationView = new App.ConfirmationView({
              model: _this.model,
              rootElement: '#form-container',
              id: 'confirm-div',
              tpl: "withdrawal-confirmation-tpl",
              type: _this.type
            });
            confirmationView.render();
            return _this.close();
          };
        })(this)
      });
    };

    WithdrawalView.prototype.setupXWBCFormValidator = function() {
      $.validator.addMethod("cryptoAddress", function(value, element) {
        return App.Helpers.CryptoCurrency.isValidAddress(value);
      });
      return this.$("#xwbc-withdraw-form").validate({
        errorClass: 'lb error',
        rules: {
          amount: {
            required: true,
            number: true,
            min: 0.000001
          },
          address: {
            required: {
              depends: function() {
                $(this).val($.trim($(this).val()));
                return true;
              }
            },
            cryptoAddress: true
          }
        },
        messages: {
          amount: {
            required: "Please provide an amount."
          },
          address: {
            required: "Please provide an address.",
            cryptoAddress: "Please provide a valid address."
          }
        },
        submitHandler: (function(_this) {
          return function(form) {
            var $form, amount, confirmationView;
            $form = $(form);
            amount = _.str.satoshiRound($form.find("[name='amount']").val());
            if (_.isNumber(amount) && amount > 0) {
              $form.find("button").attr("disabled", true);
              _this.model = new App.PaymentModel({
                amount: _.str.satoshiRound($form.find("[name='amount']").val()),
                wallet_id: $form.find("[name='wallet_id']").val(),
                address: $form.find("[name='address']").val(),
                label: $form.find("[name='label']").val()
              });
            }
            confirmationView = new App.ConfirmationView({
              model: _this.model,
              rootElement: '#form-container',
              id: 'confirm-div',
              tpl: "withdrawal-confirmation-tpl",
              type: _this.type
            });
            confirmationView.render();
            return _this.close();
          };
        })(this)
      });
    };

    WithdrawalView.prototype.setupEuBankFormValidator = function() {
      $.validator.addMethod("ibanValidate", function(value, element) {
        if (IBAN.isValid(value)) {
          return true;
        } else {
          return true;
        }
      });
      return this.$("#bank-withdraw-form").validate({
        errorClass: 'lb error',
        rules: {
          amount: {
            required: true,
            number: true,
            min: 1
          },
          email: {
            required: true,
            email: true
          },
          iban: {
            required: true,
            ibanValidate: true
          },
          bic_swift: {
            required: true
          },
          address: {
            required: true
          },
          postalcode: {
            required: true
          },
          city: {
            required: true
          },
          country: {
            required: true
          }
        },
        messages: {
          amount: {
            required: "Please provide an amount.",
            min: "The minimum withdrawal amount is \u20AC100"
          },
          address: {
            required: "Please provide an address."
          },
          email: {
            required: "Please provide an amount.",
            email: "Please provide a valid email"
          },
          iban: {
            required: "Please provide a valid IBAN",
            ibanValidate: "IBAN entered is invalid"
          },
          bic_swift: {
            required: "Please provide a valid BIC/SWIFT"
          },
          address: {
            required: "Please provide a valid Addres"
          },
          postalcode: {
            required: "Please provide a valid postal code"
          },
          city: {
            required: "Please provide a valid city"
          },
          country: {
            required: "Please provide a valid country"
          }
        },
        submitHandler: (function(_this) {
          return function(form) {
            var $form, amount, confirmationView;
            $form = $(form);
            amount = _.str.satoshiRound($form.find("[name='amount']").val());
            if (_.isNumber(amount) && amount > 0) {
              $form.find("button").attr("disabled", true);
              _this.model = new App.BankWithdrawalModel({
                amount: _.str.satoshiRound($form.find("[name='amount']").val()),
                wallet_id: $form.find("[name='wallet_id']").val(),
                type: $form.find("[name='type']").val(),
                label: $form.find("[name='label']").val(),
                email: $form.find("[name='email']").val(),
                name: $form.find("[name='name']").val(),
                iban: $form.find("[name='iban']").val(),
                bic_swift: $form.find("[name='bic_swift']").val(),
                address: $form.find("[name='address']").val(),
                postalcode: $form.find("[name='postalcode']").val(),
                city: $form.find("[name='city']").val(),
                country: $form.find("[name='country']").val()
              });
            }
            confirmationView = new App.ConfirmationView({
              model: _this.model,
              rootElement: '#form-container',
              id: 'confirm-div',
              tpl: "withdrawal-confirmation-tpl",
              type: _this.type
            });
            confirmationView.render();
            return _this.close();
          };
        })(this)
      });
    };

    WithdrawalView.prototype.setupInBankFormValidator = function() {
      $.validator.addMethod("ibanValidate", function(value, element) {
        if (IBAN.isValid(value)) {
          return true;
        } else {
          return false;
        }
      });
      return this.$("#bank-withdraw-form").validate({
        errorClass: 'lb error',
        rules: {
          amount: {
            required: true,
            number: true,
            min: 1
          },
          email: {
            required: true,
            email: true
          },
          iban: {
            required: true,
            ibanValidate: true
          },
          bic: {
            required: true
          },
          swift: {
            required: true
          },
          address: {
            required: true
          },
          postalcode: {
            required: true
          },
          city: {
            required: true
          },
          country: {
            required: true
          }
        },
        messages: {
          amount: {
            required: "Please provide an amount.",
            min: "The minimum withdrawal amount is \u20AC150"
          },
          address: {
            required: "Please provide an address."
          },
          email: {
            required: "Please provide an amount.",
            email: "Please provide a valid email"
          },
          iban: {
            required: "Please provide a valid IBAN",
            ibanValidate: "IBAN entered is invalid"
          },
          bic_swift: {
            required: "Please provide a valid BIC/SWIFT"
          },
          address: {
            required: "Please provide a valid Addres"
          },
          postalcode: {
            required: "Please provide a valid postal code"
          },
          city: {
            required: "Please provide a valid city"
          },
          country: {
            required: "Please provide a valid country"
          }
        },
        submitHandler: (function(_this) {
          return function(form) {
            var $form, amount, confirmationView;
            $form = $(form);
            amount = _.str.satoshiRound($form.find("[name='amount']").val());
            if (_.isNumber(amount) && amount > 0) {
              $form.find("button").attr("disabled", true);
              _this.model = new App.BankWithdrawalModel({
                amount: _.str.satoshiRound($form.find("[name='amount']").val()),
                wallet_id: $form.find("[name='wallet_id']").val(),
                type: $form.find("[name='type']").val(),
                label: $form.find("[name='label']").val(),
                email: $form.find("[name='email']").val(),
                name: $form.find("[name='name']").val(),
                iban: $form.find("[name='iban']").val(),
                bic_swift: $form.find("[name='bic_swift']").val(),
                address: $form.find("[name='address']").val(),
                postalcode: $form.find("[name='postalcode']").val(),
                city: $form.find("[name='city']").val(),
                country: $form.find("[name='country']").val(),
                bank_name: $form.find("[name='bank_name']").val(),
                bank_address: $form.find("[name='bank_address']").val(),
                bank_postalcode: $form.find("[name='bank_postalcode']").val(),
                bank_city: $form.find("[name='bank_city']").val(),
                bank_country: $form.find("[name='bank_country']").val(),
                bank_currency: $form.find("[name='bank_currency']").val()
              });
            }
            confirmationView = new App.ConfirmationView({
              model: _this.model,
              rootElement: '#form-container',
              id: 'confirm-div',
              tpl: "withdrawal-confirmation-tpl",
              type: _this.type
            });
            confirmationView.render();
            return _this.close();
          };
        })(this)
      });
    };

    WithdrawalView.prototype.onPay = function(form) {
      var $form, amount, payment;
      $form = $(form);
      amount = _.str.satoshiRound($form.find("[name='amount']").val());
      if (_.isNumber(amount) && amount > 0) {
        $form.find("button").attr("disabled", true);
        payment = new App.PaymentModel({
          wallet_id: $form.find("[name='wallet_id']").val(),
          amount: amount,
          address: $form.find("[name='address']").val()
        });
        return payment.save(null, {
          success: function() {
            $form.find("button").attr("disabled", false);
            $.publish("notice", "Your withdrawal will be processed soon.");
            return $.publish("payment-submited", payment);
          },
          error: function(m, xhr) {
            $form.find("button").attr("disabled", false);
            return $.publish("error", xhr);
          }
        });
      } else {
        return $.publish("error", "Please submit a proper amount.");
      }
    };

    return WithdrawalView;

  })(App.MasterView);

}).call(this);
