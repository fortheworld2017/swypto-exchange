// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.ProfileView = (function(superClass) {
    extend(ProfileView, superClass);

    function ProfileView() {
      return ProfileView.__super__.constructor.apply(this, arguments);
    }

    ProfileView.prototype.tpl = null;

    ProfileView.prototype.model = null;

    ProfileView.prototype.events = {
      "blur #email": "onEmailBlur"
    };

    ProfileView.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      this.setupFormValidators();
      return this.render();
    };

    ProfileView.prototype.onProfileEditFormSubmit = function(form, ev) {
      var $form, data;
      ev.preventDefault();
      $form = $(ev.target);
      data = {
        email: $form.find("[name='email']").val(),
        firstname: $form.find("[name='firstname']").val(),
        lastname: $form.find("[name='lastname']").val(),
        alternate_email: $form.find("[name='alternate_email']").val(),
        address1: $form.find("[name='address1']").val(),
        address2: $form.find("[name='address2']").val(),
        city: $form.find("[name='city']").val(),
        country: $form.find("[name='country']").val(),
        postcode: $form.find("[name='postcode']").val(),
        phone: $form.find("[name='phone']").val(),
        skypeId: $form.find("[name='skypeId']").val()
      };
      return this.model.save(data, {
        success: function() {
          return $.publish("error", "Settings successfully saved");
        },
        error: function(m, xhr) {
          $.publish("error", xhr);
          console.dir(xhr.responseJSON.error);
          return $form.find("#error-cnt").text('Updating settings failed. Error: ' + xhr.responseJSON.error);
        }
      });
    };

    ProfileView.prototype.setupFormValidators = function() {
      return this.$("#profile-edit-form").validate({
        errorClass: 'lb error',
        rules: {
          email: {
            required: true,
            email: true,
            remote: {
              url: "/user/search/email",
              type: "post"
            }
          },
          name: {
            required: true
          },
          address1: {
            required: true
          },
          country: {
            required: true
          },
          postcode: {
            required: true
          },
          city: {
            required: true
          },
          alternate_email: {
            email: true
          }
        },
        messages: {
          email: {
            required: "Please provide an email address.",
            remote: $.format('<i class="fa fa-warning"></i> The Email {0} has already been taken')
          },
          name: {
            required: "Please provide a name."
          },
          address1: {
            required: "Please provide an address."
          },
          country: {
            required: "Please provide a country."
          },
          postcode: {
            required: "Please provide a postal code."
          },
          city: {
            required: "Please provide a city."
          }
        },
        submitHandler: (function(_this) {
          return function(form, ev) {
            _this.onProfileEditFormSubmit(form, ev);
            return false;
          };
        })(this)
      });
    };

    ProfileView.prototype.onEmailBlur = function(ev) {
      $("#profile-edit-form").validate();
      return false;
    };

    return ProfileView;

  })(App.MasterView);

}).call(this);
