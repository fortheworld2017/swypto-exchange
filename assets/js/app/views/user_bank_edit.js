// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.UserBankEditView = (function(superClass) {
    extend(UserBankEditView, superClass);

    function UserBankEditView() {
      return UserBankEditView.__super__.constructor.apply(this, arguments);
    }

    UserBankEditView.prototype.tpl = null;

    UserBankEditView.prototype.model = null;

    UserBankEditView.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      return this.setupFormValidators();
    };

    UserBankEditView.prototype.onBankEditFormSubmit = function(form, ev) {
      var $form, data;
      ev.preventDefault();
      $form = $(ev.target);
      data = {
        name: $form.find("[name='account_holder_name']").val(),
        bank_name: $form.find("[name='bank_name']").val(),
        bank_address: $form.find("[name='bank_address']").val(),
        bank_city: $form.find("[name='bank_city']").val(),
        bank_post_code: $form.find("[name='bank_post_code']").val(),
        country: $form.find("[name='bank_country']").val(),
        iban: $form.find("[name='iban']").val(),
        swift: $form.find("[name='swift_code']").val(),
        preferred_currency: $form.find("[name='preferred_currency']").val()
      };
      return this.model.save(data, {
        success: function() {
          return $.publish("error", "Settings successfully saved.");
        },
        error: function(m, xhr) {
          $.publish("error", xhr);
          console.dir(xhr.responseJSON.error);
          return $form.find("#error-cnt").text('Updating settings failed. Error: ' + xhr.responseJSON.error);
        }
      });
    };

    UserBankEditView.prototype.setupFormValidators = function() {
      this.$("#bank-edit-form").validate({
        errorClass: 'lb error',
        rules: {
          account_holder_name: {
            required: true
          }
        },
        messages: {
          account_holder_name: {
            required: "Please provide the account holder's name123 ."
          }
        },
        submitHandler: (function(_this) {
          return function(form, ev) {
            _this.onBankEditFormSubmit(form, ev);
            return false;
          };
        })(this)
      });
      return $.validator.addMethod("ibanValidate", function(value, element) {
        if (IBAN.isValid(value) === true) {
          return true;
        } else {
          return true;
        }
      });
    };

    UserBankEditView.prototype.onEmailBlur = function(ev) {
      $("#profile-edit-form").validate();
      return false;
    };

    return UserBankEditView;

  })(App.MasterView);

}).call(this);
