// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.PendingWithdrawalsView = (function(superClass) {
    extend(PendingWithdrawalsView, superClass);

    function PendingWithdrawalsView() {
      this.onWalletBalanceChanged = bind(this.onWalletBalanceChanged, this);
      this.onPaymentSubmited = bind(this.onPaymentSubmited, this);
      this.onPaymentProcessed = bind(this.onPaymentProcessed, this);
      this.onTransactionUpdate = bind(this.onTransactionUpdate, this);
      return PendingWithdrawalsView.__super__.constructor.apply(this, arguments);
    }

    PendingWithdrawalsView.prototype.tpl = "pending-withdrawal-tpl";

    PendingWithdrawalsView.prototype.collection = null;

    PendingWithdrawalsView.prototype.payments = null;

    PendingWithdrawalsView.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      this.payments = options.payments;
      if (options.hideOnEmpty) {
        this.hideOnEmpty = options.hideOnEmpty;
      }
      return $.subscribe("wallet-balance-changed", this.onWalletBalanceChanged);
    };

    PendingWithdrawalsView.prototype.render = function() {
      return this.collection.fetch({
        success: (function(_this) {
          return function() {
            if (_this.collection.length < 1) {
              _this.disableExcel();
            }
            _this.collection.each(function(withdrawal) {
              var $existentTx, $tx;
              $tx = _this.template({
                withdrawal: withdrawal
              });
              $existentTx = _this.$("[data-id='" + withdrawal.id + "']");
              if (!$existentTx.length) {
                return _this.$el.prepend($tx);
              } else {
                return $existentTx.replaceWith($tx);
              }
            });
            if (_this.hideOnEmpty) {
              return _this.toggleVisible();
            }
          };
        })(this)
      });
    };

    PendingWithdrawalsView.prototype.onTransactionUpdate = function(ev, transaction) {
      this.render();
      if (transaction.get("balance_loaded")) {
        return this.$("[data-id='" + transaction.id + "']").remove();
      }
    };

    PendingWithdrawalsView.prototype.onPaymentProcessed = function(ev, payment) {
      this.render();
      return this.$("[data-id='" + payment.id + "']").remove();
    };

    PendingWithdrawalsView.prototype.onPaymentSubmited = function(ev, payment) {
      return this.render();
    };

    PendingWithdrawalsView.prototype.onWalletBalanceChanged = function(ev, wallet) {
      return this.render();
    };

    PendingWithdrawalsView.prototype.disableExcel = function() {
      var $exportCompletedTransactions;
      $exportCompletedTransactions = $('#export-excel-withdrawals');
      if ($exportCompletedTransactions.length > 0) {
        return $exportCompletedTransactions.hide();
      }
    };

    return PendingWithdrawalsView;

  })(App.MasterView);

}).call(this);
