// Generated by CoffeeScript 1.10.0
(function() {
  $(document).ready(function() {
    var $btcWithdrawal, $closedOrders, $euWithdrawal, $finances, $marketTicker, $notificationSettings, $openOrders, $orderBookBuy, $orderBookSell, $overviewClosedOrders, $overviewOpenOrders, $pendingTransactions, $pendingWithdrawals, $profileEdit, $settings, $settingsOpenOrders, $trade, $transClosedOrders, $transHistory, $transactions, $transactionsHistory, $userBankEdit, $withdrawalHistory, $withdrawals, $xwbcWithdrawal, bank, closedOrders, errorLogger, finances, marketTicker, notificationSettings, openOrders, orderBookBuy, orderBookSell, ordersSocket, overviewClosedOrders, overviewOpenOrders, paymentHistory, pendingTransactions, pendingWithdrawals, profileEdit, settings, trade, tradeChart, transClosedOrders, transHistory, transactionsHistory, type, user, userBankEdit, withdrawal, withdrawals;
    $.tmpload.defaults.tplWrapper = _.template;
    $(document).ajaxSend(function(ev, xhr) {
      return xhr.setRequestHeader("X-CSRF-Token", CONFIG.csrf);
    });
    App.math = mathjs({
      number: "bignumber",
      decimals: 8
    });
    _.str.roundTo = function(number, decimals) {
      if (decimals == null) {
        decimals = 8;
      }
      return App.math.round(parseFloat(number), decimals);
    };
    _.str.satoshiRound = function(number) {
      return _.str.roundTo(number, 8);
    };
    _.str.toFixed = function(number, decimals) {
      if (decimals == null) {
        decimals = 8;
      }
      return parseFloat(number).toFixed(decimals);
    };
    errorLogger = new App.ErrorLogger;
    user = new App.UserModel;
    user.fetch({
      success: function() {
        var usersSocket;
        if (user.id) {
          usersSocket = io.connect(CONFIG.users.hostname + "/users");
          usersSocket.on("payment-processed", (function(_this) {
            return function(data) {
              var payment;
              payment = new App.PaymentModel(data);
              return $.publish("payment-processed", payment);
            };
          })(this));
          usersSocket.on("transaction-update", (function(_this) {
            return function(data) {
              var transaction;
              transaction = new App.TransactionModel(data);
              return $.publish("transaction-update", transaction);
            };
          })(this));
          return usersSocket.on("wallet-balance-loaded", (function(_this) {
            return function(data) {
              var wallet;
              wallet = new App.WalletModel(data);
              return $.publish("wallet-balance-loaded", wallet);
            };
          })(this));
        }
      }
    });
    $(".amount-field").keyup(function(ev) {
      var $target, amount, decimals, integer;
      $target = $(ev.target);
      amount = $target.val();
      if (amount.indexOf(".") > -1) {
        decimals = amount.substr(amount.indexOf(".") + 1);
        if (decimals.length > 8) {
          integer = amount.substr(0, amount.indexOf("."));
          decimals = decimals.substr(0, 8);
          return $target.val(integer + "." + decimals);
        }
      }
    });
    $settings = $("#settings");
    if ($settings.length) {
      settings = new App.SettingsView({
        el: $settings,
        model: user
      });
    }
    $notificationSettings = $("#notification-settings");
    if ($notificationSettings.length) {
      notificationSettings = new App.NotificationSettingsView({
        el: $notificationSettings,
        model: user
      });
    }
    $profileEdit = $("#profile-edit");
    if ($profileEdit.length) {
      profileEdit = new App.ProfileView({
        el: $profileEdit,
        model: user
      });
    }
    $userBankEdit = $("#user-bank-edit");
    if ($userBankEdit.length) {
      bank = new App.BankModel;
      bank.fetch({
        success: function() {}
      });
      userBankEdit = new App.UserBankEditView({
        el: $userBankEdit,
        model: bank
      });
    }
    $settingsOpenOrders = $('#settings-open-orders');
    if ($settingsOpenOrders.length) {
      $overviewOpenOrders = $("#settings-orders-cnt");
      if ($overviewOpenOrders.length) {
        overviewOpenOrders = new App.OrdersView({
          el: $overviewOpenOrders,
          tpl: "wallet-open-order-tpl",
          collection: new App.OrdersCollection(null, {
            type: "open",
            userId: CONFIG.currentUser.id
          }),
          hideOnEmpty: false
        });
        overviewOpenOrders.render();
      }
    }
    $transactions = $('#transactions');
    if ($transactions.length) {
      $transClosedOrders = $("#trans-closed-orders");
      if ($transClosedOrders) {
        transClosedOrders = new App.OrdersView({
          el: $transClosedOrders,
          tpl: "transaction-completed-order-tpl",
          collection: new App.OrdersCollection(null, {
            type: "completed",
            userId: CONFIG.currentUser.id
          }),
          hideOnEmpty: false
        });
        transClosedOrders.render();
      }
      $transHistory = $("#trans-completed-transactions");
      if ($transHistory.length) {
        transHistory = new App.TransactionsHistoryView({
          el: $transHistory,
          collection: new App.TransactionsCollection(null, {
            type: "processed",
            walletId: 'All'
          }),
          hideOnEmpty: false
        });
        transHistory.render();
      }
      $withdrawalHistory = $("#trans-completed-bank-withdrawals");
      if ($withdrawalHistory.length) {
        paymentHistory = new App.PendingWithdrawalsView({
          el: $withdrawalHistory,
          collection: new App.BankWithdrawalsCollection(null, {
            type: 'All',
            status: 'processed'
          }),
          hideOnEmpty: false
        });
        paymentHistory.render();
      }
    }
    $withdrawals = $("#withdrawal");
    if ($withdrawals.length) {
      withdrawals = new App.WithdrawalsView({
        el: $withdrawals,
        collection: new App.WalletsCollection
      });
      withdrawals.render();
      $btcWithdrawal = $("#btc-withdrawal-container");
      if ($btcWithdrawal.length) {
        withdrawal = new App.WithdrawalView({
          rootElement: '#form-container',
          tpl: "btc-form",
          type: $btcWithdrawal.data("withdrawal-type")
        });
        withdrawal.render();
      }
      $xwbcWithdrawal = $("#xwbc-withdrawal-container");
      if ($xwbcWithdrawal.length) {
        withdrawal = new App.WithdrawalView({
          rootElement: '#form-container',
          tpl: "xwbc-form",
          type: $xwbcWithdrawal.data("withdrawal-type")
        });
        withdrawal.render();
      }
      $euWithdrawal = $("#eu-withdrawal-container");
      if ($euWithdrawal.length) {
        withdrawal = new App.WithdrawalView({
          id: "with-form",
          tpl: "bank-form",
          type: $euWithdrawal.data("withdrawal-type")
        });
        withdrawal.render();
      }
      $pendingWithdrawals = $("#pending-transactions-cnt");
      if ($pendingWithdrawals.length) {
        type = $pendingWithdrawals.data("type");
        if (type === 'BTC' || type === 'XWBC') {
          pendingTransactions = new App.PendingTransactionsView({
            el: $pendingWithdrawals,
            collection: new App.TransactionsCollection(null, {
              type: "pending",
              walletId: $pendingWithdrawals.data("wallet-id")
            }),
            payments: new App.PaymentsCollection(null, {
              type: "pending",
              walletId: $pendingWithdrawals.data("wallet-id")
            }),
            hideOnEmpty: true
          });
          pendingTransactions.render();
        } else {
          pendingWithdrawals = new App.PendingWithdrawalsView({
            el: $pendingWithdrawals,
            collection: new App.BankWithdrawalsCollection(null, {
              status: "pending",
              walletId: $pendingWithdrawals.data("wallet-id"),
              type: $pendingWithdrawals.data("type")
            }),
            hideOnEmpty: true
          });
          pendingWithdrawals.render();
        }
      }
      $transactionsHistory = $("#transactions-history-cnt");
      if ($transactionsHistory.length) {
        transactionsHistory = new App.TransactionsHistoryView({
          el: $transactionsHistory,
          collection: new App.TransactionsCollection(null, {
            type: "processed",
            walletId: $transactionsHistory.data("wallet-id")
          }),
          hideOnEmpty: true
        });
        transactionsHistory.render();
      }
    }
    $marketTicker = $("#market-ticker");
    if ($marketTicker.length) {
      marketTicker = new App.MarketTickerView({
        el: $marketTicker,
        model: new App.MarketStatsModel
      });
    }
    $finances = $("#finances");
    if ($finances.length) {
      finances = new App.FinancesView({
        el: $finances,
        collection: new App.WalletsCollection
      });
      finances.render();
      $pendingTransactions = $("#pending-transactions-cnt");
      if ($pendingTransactions.length) {
        pendingTransactions = new App.PendingTransactionsView({
          el: $pendingTransactions,
          collection: new App.TransactionsCollection(null, {
            type: "pending",
            walletId: $pendingTransactions.data("wallet-id")
          }),
          payments: new App.PaymentsCollection(null, {
            type: "pending",
            walletId: $pendingTransactions.data("wallet-id")
          }),
          hideOnEmpty: true
        });
        pendingTransactions.render();
      }
      $transactionsHistory = $("#transactions-history-cnt");
      if ($transactionsHistory.length) {
        transactionsHistory = new App.TransactionsHistoryView({
          el: $transactionsHistory,
          collection: new App.TransactionsCollection(null, {
            type: "processed",
            walletId: $transactionsHistory.data("wallet-id")
          }),
          hideOnEmpty: true
        });
        transactionsHistory.render();
      }
      $openOrders = $("#open-orders-cnt");
      if ($openOrders.length) {
        openOrders = new App.OrdersView({
          el: $openOrders,
          tpl: "wallet-open-order-tpl",
          collection: new App.OrdersCollection(null, {
            type: "open",
            currency1: $openOrders.data("currency1"),
            userId: CONFIG.currentUser.id
          }),
          hideOnEmpty: true
        });
        openOrders.render();
      }
      $closedOrders = $("#closed-orders-cnt");
      if ($closedOrders.length) {
        closedOrders = new App.OrderLogsView({
          el: $closedOrders,
          tpl: "wallet-closed-order-tpl",
          collection: new App.OrdersCollection(null, {
            type: "completed",
            currency1: $closedOrders.data("currency1"),
            userId: CONFIG.currentUser.id
          }),
          hideOnEmpty: true
        });
        closedOrders.render();
      }
      $overviewOpenOrders = $("#overview-open-orders-cnt");
      if ($overviewOpenOrders.length) {
        overviewOpenOrders = new App.OrdersView({
          el: $overviewOpenOrders,
          tpl: "wallet-open-order-tpl",
          collection: new App.OrdersCollection(null, {
            type: "open",
            userId: CONFIG.currentUser.id
          }),
          hideOnEmpty: true
        });
        overviewOpenOrders.render();
      }
      $overviewClosedOrders = $("#overview-closed-orders-cnt");
      if ($overviewClosedOrders.length) {
        overviewClosedOrders = new App.OrderLogsView({
          el: $overviewClosedOrders,
          tpl: "wallet-closed-order-tpl",
          collection: new App.OrderLogsCollection(null, {
            userId: CONFIG.currentUser.id
          }),
          hideOnEmpty: true
        });
        overviewClosedOrders.render();
      }
    }
    $buy = $("#buy");
    if ($buy.length) {
      if ($marketTicker.length) {
        marketTicker.markActive($buy.data("currency1"));
      }
      buy = new App.BuyView({
        el: $buy,
        model: new App.MarketStatsModel,
        currency1: $buy.data("currency1"),
        currency2: $buy.data("currency2")
      });
      buy.setupFormValidators();
    }
    $trade = $("#trade");
    if ($trade.length) {
      if ($marketTicker.length) {
        marketTicker.markActive($trade.data("currency1"));
      }
      trade = new App.TradeView({
        el: $trade,
        model: new App.MarketStatsModel,
        currency1: $trade.data("currency1"),
        currency2: $trade.data("currency2")
      });
      trade.setupFormValidators();
      tradeChart = new App.TradeChartView({
        el: $trade.find("#trade-chart"),
        collection: new App.TradeStatsCollection(null, {
          type: ($trade.data('currency1')) + "_" + ($trade.data('currency2'))
        })
      });
      tradeChart.render();
      $openOrders = $("#open-orders-cnt");
      openOrders = new App.OrdersView({
        el: $openOrders,
        tpl: "open-order-tpl",
        collection: new App.OrdersCollection(null, {
          type: "open",
          currency1: $openOrders.data("currency1"),
          currency2: $openOrders.data("currency2"),
          userId: CONFIG.currentUser.id || "guest"
        }),
        hideOnEmpty: true
      });
      openOrders.render();
      $orderBookSell = $("#order-book-sell-cnt");
      orderBookSell = new App.OrderBookView({
        el: $orderBookSell,
        tpl: "order-book-order-tpl",
        $totalsEl: $trade.find("#order-book-sell-volume-total"),
        collection: new App.OrdersCollection(null, {
          type: "open",
          action: "sell",
          currency1: $orderBookSell.data("currency1"),
          currency2: $orderBookSell.data("currency2"),
          published: true,
          orderBy: [["unit_price", "ASC"], ["created_at", "ASC"]]
        })
      });
      orderBookSell.render();
      $orderBookBuy = $("#order-book-buy-cnt");
      orderBookBuy = new App.OrderBookView({
        el: $orderBookBuy,
        tpl: "order-book-order-tpl",
        $totalsEl: $trade.find("#order-book-buy-volume-total"),
        collection: new App.OrdersCollection(null, {
          type: "open",
          action: "buy",
          currency1: $orderBookBuy.data("currency1"),
          currency2: $orderBookBuy.data("currency2"),
          published: true,
          orderBy: [["unit_price", "DESC"], ["created_at", "ASC"]]
        })
      });
      orderBookBuy.render();
      $closedOrders = $("#closed-orders-cnt");
      closedOrders = new App.OrderLogsView({
        el: $closedOrders,
        tpl: "site-closed-order-tpl",
        collection: new App.OrderLogsCollection(null, {
          type: "completed",
          currency1: $closedOrders.data("currency1"),
          currency2: $closedOrders.data("currency2")
        }),
        hideOnEmpty: true
      });
      closedOrders.render();
    }
    ordersSocket = io.connect(CONFIG.users.hostname + "/orders");
    ordersSocket.on("connect", function() {});
    ordersSocket.on("error", function(error) {});
    ordersSocket.on("order-published", function(data) {
      var order;
      order = new App.OrderModel(data);
      return $.publish("new-order", order);
    });
    ordersSocket.on("order-completed", function(data) {
      var order;
      order = new App.OrderModel(data);
      return $.publish("order-completed", order);
    });
    ordersSocket.on("order-partially-completed", function(data) {
      var order;
      order = new App.OrderModel(data);
      return $.publish("order-partially-completed", order);
    });
    ordersSocket.on("order-canceled", function(data) {
      return $.publish("order-canceled", data);
    });
    ordersSocket.on("order-to-cancel", function(data) {
      return $.publish("order-to-cancel", data);
    });
    ordersSocket.on("order-to-add", function(data) {
      return $.publish("order-to-add", data);
    });
    return ordersSocket.on("market-stats-updated", function(data) {
      return $.publish("market-stats-updated", data);
    });
  });

}).call(this);
