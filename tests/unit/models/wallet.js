// Generated by CoffeeScript 1.9.3
(function() {
  var speakeasy;

  require("./../../helpers/spec_helper");

  speakeasy = require("speakeasy");

  describe("Wallet", function() {
    var CURRENCIES, wallet;
    wallet = void 0;

    /*
    CURRENCIES = [
      "BTC", "LTC", "PPC", "WDC", "NMC", "QRK",
      "NVC", "ZET", "FTC", "XPM", "MEC", "TRC"
    ]
     */
    CURRENCIES = ["BTC", "LTC", "PPC"];
    beforeEach(function(done) {
      GLOBAL.coreAPIClient = {
        send: function(action, data, callback) {
          if (action === "create_account") {
            return callback(null, null, {
              address: "address_" + data[0] + "_" + data[1]
            });
          }
          return callback("Unknown action");
        }
      };
      return GLOBAL.db.sequelize.sync({
        force: true
      }).complete(function() {
        return GLOBAL.db.Wallet.create({
          currency: "BTC",
          user_id: 1
        }).complete(function(err, wl) {
          wallet = wl;
          return done();
        });
      });
    });
    afterEach(function() {
      return GLOBAL.coreAPIClient = void 0;
    });
    describe("account", function() {
      return it("returns a virtual wallet account", function() {
        return wallet.account.should.eql("wallet_" + wallet.id);
      });
    });
    describe("withdrawal_fee", function() {
      return it("returns the withdrawal fee for the wallet currency", function() {
        return wallet.withdrawal_fee.should.eql(20000);
      });
    });
    describe("generateAddress", function() {
      return it("sets a new wallet address", function(done) {
        return wallet.generateAddress(function(err, wl) {
          wl.address.should.eql("address_" + wallet.account + "_" + wallet.currency);
          return done();
        });
      });
    });
    describe("addBalance", function() {
      return it("adds the balance to the wallet", function(done) {
        wallet.balance = 0;
        return wallet.save().complete(function(err, wl) {
          return wl.addBalance(3, null, function(err, syncedWallet) {
            syncedWallet.balance.should.eql(3);
            return done();
          });
        });
      });
    });
    describe("canWithdraw", function() {
      beforeEach(function() {
        return wallet.balance = 1000000000;
      });
      describe("when it does not include a fee", function() {
        describe("when the balance is bigger than the given amount", function() {
          return it("returns true", function() {
            return wallet.canWithdraw(900000000).should.be["true"];
          });
        });
        describe("when the balance is equal to the given amount", function() {
          return it("returns true", function() {
            return wallet.canWithdraw(1000000000).should.be["true"];
          });
        });
        return describe("when the balance is lower than the given amount", function() {
          return it("returns false", function() {
            return wallet.canWithdraw(1100000000).should.be["false"];
          });
        });
      });
      return describe("when it includes the fee", function() {
        describe("when the balance without the fee is bigger than the given amount", function() {
          return it("returns true", function() {
            return wallet.canWithdraw(900000000, true).should.be["true"];
          });
        });
        describe("when the balance without the fee is equal to the given amount", function() {
          return it("returns true", function() {
            return wallet.canWithdraw(999980000, true).should.be["true"];
          });
        });
        return describe("when the balance is lower than the given amount", function() {
          return it("returns false", function() {
            return wallet.canWithdraw(999980001, true).should.be["false"];
          });
        });
      });
    });
    describe("findUserWalletByCurrency", function() {
      var savedWalletId;
      savedWalletId = void 0;
      beforeEach(function(done) {
        return GLOBAL.db.Wallet.create({
          user_id: "user_id",
          currency: "BTC"
        }).complete(function(err, wl) {
          savedWalletId = wl.id;
          return GLOBAL.db.Wallet.create({
            user_id: "user_id",
            currency: "LTC"
          }).complete(function() {
            return GLOBAL.db.Wallet.create({
              user_id: "user_id2",
              currency: "LTC"
            }).complete(function() {
              return done();
            });
          });
        });
      });
      return describe("when there is a wallet for the given user with the given currency", function() {
        return it("returns the first wallet with the given user id and currency", function(done) {
          return GLOBAL.db.Wallet.findUserWalletByCurrency("user_id", "BTC", function(err, wl) {
            wl.id.should.eql(savedWalletId);
            return done();
          });
        });
      });
    });
    describe("findUserWallets", function() {
      beforeEach(function(done) {
        return GLOBAL.db.Wallet.create({
          user_id: 2,
          currency: "BTC",
          created: Date.now() - 1000
        }).complete(function(err, wl) {
          return GLOBAL.db.Wallet.create({
            user_id: 2,
            currency: "LTC",
            created: Date.now()
          }).complete(function() {
            return GLOBAL.db.Wallet.create({
              user_id: 3,
              currency: "LTC"
            }).complete(function() {
              return done();
            });
          });
        });
      });
      it("returns the user wallets", function(done) {
        return GLOBAL.db.Wallet.findUserWallets(2, function(err, wallets) {
          wallets.length.should.eql(2);
          return done();
        });
      });
      return it("orders the wallets desc by created", function(done) {
        return GLOBAL.db.Wallet.findUserWallets(2, function(err, wallets) {
          [wallets[0].currency, wallets[1].currency].toString().should.eql(["BTC", "LTC"].toString());
          return done();
        });
      });
    });
    describe("findUserWallet", function() {
      var savedWalletId;
      savedWalletId = void 0;
      beforeEach(function(done) {
        return GLOBAL.db.Wallet.create({
          user_id: 2,
          currency: "BTC"
        }).complete(function() {
          return GLOBAL.db.Wallet.create({
            user_id: 2,
            currency: "LTC"
          }).complete(function(err, wl) {
            savedWalletId = wl.id;
            return GLOBAL.db.Wallet.create({
              user_id: 3,
              currency: "LTC"
            }).complete(function() {
              return done();
            });
          });
        });
      });
      return it("returns the user wallet by the given user id and wallet id", function(done) {
        return GLOBAL.db.Wallet.findUserWallet(2, savedWalletId, function(err, wl) {
          wl.id.should.eql(savedWalletId);
          return done();
        });
      });
    });
    return describe("findByAccount", function() {
      var savedWalletId;
      savedWalletId = void 0;
      beforeEach(function(done) {
        return GLOBAL.db.Wallet.create({
          user_id: 2,
          currency: "BTC"
        }).complete(function(err, wl) {
          savedWalletId = wl.id;
          return done();
        });
      });
      return it("returns a wallet by the given account", function(done) {
        return GLOBAL.db.Wallet.findByAccount("wallet_" + savedWalletId, function(err, wl) {
          wl.id.should.eql(savedWalletId);
          return done();
        });
      });
    });
  });

}).call(this);
