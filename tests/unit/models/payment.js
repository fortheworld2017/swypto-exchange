// Generated by CoffeeScript 1.9.3
(function() {
  require("./../../helpers/spec_helper");

  describe("Payment", function() {
    var payment;
    payment = void 0;
    beforeEach(function(done) {
      payment = GLOBAL.db.Payment.build({
        id: 1,
        user_id: 1,
        wallet_id: 1,
        amount: 1000000000,
        currency: "BTC",
        address: "mrLpnPMsKR8oFqRRYA28y4Txu98TUNQzVw",
        status: "pending"
      });
      return GLOBAL.db.sequelize.sync({
        force: true
      }).complete(function() {
        return done();
      });
    });
    describe("isProcessed", function() {
      describe("when the status is processed", function() {
        return it("returns true", function() {
          payment.status = "processed";
          return payment.isProcessed().should.eql(true);
        });
      });
      return describe("when the status is not processed", function() {
        return it("returns false", function() {
          payment.status = "pending";
          return payment.isProcessed().should.eql(false);
        });
      });
    });
    describe("isCanceled", function() {
      describe("when the status is canceled", function() {
        return it("returns true", function() {
          payment.status = "canceled";
          return payment.isCanceled().should.eql(true);
        });
      });
      return describe("when the status is not canceled", function() {
        return it("returns false", function() {
          payment.status = "pending";
          return payment.isCanceled().should.eql(false);
        });
      });
    });
    describe("isPending", function() {
      describe("when the status is pending", function() {
        return it("returns true", function() {
          payment.status = "pending";
          return payment.isPending().should.eql(true);
        });
      });
      return describe("when the status is not pending", function() {
        return it("returns false", function() {
          payment.status = "canceled";
          return payment.isPending().should.eql(false);
        });
      });
    });
    describe("process", function() {
      it("sets the status processed", function(done) {
        return payment.process("txid", function(err, pm) {
          pm.status.should.eql("processed");
          return done();
        });
      });
      it("sets the transaction id", function(done) {
        return payment.process("txid", function(err, pm) {
          pm.transaction_id.should.eql("txid");
          return done();
        });
      });
      return it("sets the given result as log", function(done) {
        return payment.process("txid", function(err, pm) {
          return GLOBAL.db.PaymentLog.findByPaymentId(pm.id, function(err, paymentLogs) {
            paymentLogs[0].log.should.eql("txid");
            return done();
          });
        });
      });
    });
    describe("cancel", function() {
      it("sets the status canceled", function(done) {
        return payment.cancel("result", function(err, pm) {
          pm.status.should.eql("canceled");
          return done();
        });
      });
      return it("sets the given result as log", function(done) {
        return payment.cancel("result", function(err, pm) {
          return GLOBAL.db.PaymentLog.findByPaymentId(pm.id, function(err, paymentLogs) {
            paymentLogs[0].log.should.eql("result");
            return done();
          });
        });
      });
    });
    return describe("errored", function() {
      it("keeps the old status", function(done) {
        return payment.errored({
          error: "failed"
        }, function(err, pm) {
          pm.status.should.eql("pending");
          return done();
        });
      });
      return it("sets the given result as log", function(done) {
        return payment.errored("{error:'failed'}", function(err, pm) {
          return GLOBAL.db.PaymentLog.findByPaymentId(pm.id, function(err, paymentLogs) {
            paymentLogs[0].log.should.eql("{error:'failed'}");
            return done();
          });
        });
      });
    });
  });

}).call(this);
