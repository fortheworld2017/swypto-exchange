// Generated by CoffeeScript 1.9.3
(function() {
  var MarketHelper;

  MarketHelper = require("../../../lib/market_helper");

  require("./../../helpers/spec_helper");

  describe("Order", function() {
    var order;
    order = void 0;
    beforeEach(function(done) {
      order = GLOBAL.db.Order.build({
        id: 1,
        user_id: 1,
        type: 1,
        action: 1,
        buy_currency: "2",
        sell_currency: "1",
        amount: 1000000000,
        unit_price: 10000000,
        status: 3,
        published: 1
      });
      return GLOBAL.db.sequelize.sync({
        force: true
      }).complete(function() {
        return done();
      });
    });
    describe("inversed_action", function() {
      describe("when the action is buy", function() {
        return it("returns sell", function() {
          order.action = "buy";
          return order.inversed_action.should.eql("sell");
        });
      });
      describe("when the action is sell", function() {
        return it("returns buy", function() {
          order.action = "sell";
          return order.inversed_action.should.eql("buy");
        });
      });
      return describe("when the action is neither buy or sell", function() {
        return it("returns undefined", function() {
          var ref;
          order.action = "other";
          return (ref = order.inversed_action) != null ? ref.should.not.be.ok : void 0;
        });
      });
    });
    describe("left_amount", function() {
      return it("returns the amount minus the matched_amount", function() {
        order.amount = 50;
        order.matched_amount = 10;
        return order.left_amount.should.eql(40);
      });
    });
    describe("left_hold_balance", function() {
      describe("when the action is sell", function() {
        return it("returns the left_amount", function() {
          order.action = "sell";
          order.amount = 50;
          order.matched_amount = 10;
          return order.left_hold_balance.should.eql(40);
        });
      });
      return describe("when the action is buy", function() {
        return it("returns the left_amount times (unit_price converted to float)", function() {
          order.action = "buy";
          order.amount = 50;
          order.matched_amount = 10;
          order.unit_price = MarketHelper.toBigint(1.5);
          return order.left_hold_balance.should.eql(60);
        });
      });
    });
    describe("isValidTradeAmount", function() {
      describe("when amount is not a valid finite number", function() {
        return it("returns false", function() {
          GLOBAL.db.Order.isValidTradeAmount(Number.NaN).should.be["false"];
          GLOBAL.db.Order.isValidTradeAmount(Number.Infinity).should.be["false"];
          return GLOBAL.db.Order.isValidTradeAmount(Number.NEGATIVE_INFINITY).should.be["false"];
        });
      });
      return describe("when amount is a valid finite number", function() {
        describe("but is less than min trade amount", function() {
          return it("returns false", function() {
            return GLOBAL.db.Order.isValidTradeAmount(MarketHelper.getMinTradeAmount() * 0.99).should.be["false"];
          });
        });
        return describe("and is greater than or equal to min trade amount", function() {
          return it("returns true", function() {
            GLOBAL.db.Order.isValidTradeAmount(MarketHelper.getMinTradeAmount()).should.be["true"];
            return GLOBAL.db.Order.isValidTradeAmount(MarketHelper.getMinTradeAmount() * 1.1).should.be["true"];
          });
        });
      });
    });
    describe("isValidFee", function() {
      return describe("when the fee is zero", function() {
        return describe("when amount is not a valid finite number", function() {
          return it("returns true", function() {
            GLOBAL.db.Order.isValidFee(Number.NaN, "buy", MarketHelper.toBigint(1.5)).should.be["true"];
            GLOBAL.db.Order.isValidFee(Number.Infinity, "buy", MarketHelper.toBigint(1.5)).should.be["true"];
            return GLOBAL.db.Order.isValidFee(Number.NEGATIVE_INFINITY, "buy", MarketHelper.toBigint(1.5)).should.be["true"];
          });
        });
      });
    });
    describe("isValidSpendAmount", function() {
      return describe("when amount is not a valid finite number", function() {
        return it("returns false", function() {
          GLOBAL.db.Order.isValidSpendAmount(Number.NaN, "buy", MarketHelper.toBigint(1.5)).should.be["false"];
          GLOBAL.db.Order.isValidSpendAmount(Number.Infinity, "buy", MarketHelper.toBigint(1.5)).should.be["false"];
          return GLOBAL.db.Order.isValidSpendAmount(Number.NEGATIVE_INFINITY, "buy", MarketHelper.toBigint(1.5)).should.be["false"];
        });
      });
    });
    describe("isValidReceiveAmount", function() {
      return describe("when amount is not a valid finite number", function() {
        return it("returns false", function() {
          GLOBAL.db.Order.isValidReceiveAmount(Number.NaN, "buy", MarketHelper.toBigint(1.5)).should.be["false"];
          GLOBAL.db.Order.isValidReceiveAmount(Number.Infinity, "buy", MarketHelper.toBigint(1.5)).should.be["false"];
          return GLOBAL.db.Order.isValidReceiveAmount(Number.NEGATIVE_INFINITY, "buy", MarketHelper.toBigint(1.5)).should.be["false"];
        });
      });
    });
    describe("getFloat", function() {
      describe("when there is no such field", function() {
        return it("returns undefined", function() {
          var ref;
          return (ref = order.getFloat("no_such_field")) != null ? ref.should.not.be.ok : void 0;
        });
      });
      describe("when the field exists", function() {
        return it("converts it from bigint to float", function() {
          order.unit_price = MarketHelper.toBigint(1.5);
          return order.getFloat("unit_price").should.eql(1.5);
        });
      });
      return describe("when the field is not numeric", function() {
        return it("returns undefined", function() {
          var ref;
          console.log(order.getFloat("action"));
          return (ref = order.getFloat("action")) != null ? ref.should.not.be.ok : void 0;
        });
      });
    });
    describe("publish", function() {
      return describe("when there is such an order id", function() {
        return it("publishes it to the network", function() {
          return order.id = 1;
        });
      });
    });
    return describe("cancel", function() {});
  });

}).call(this);
