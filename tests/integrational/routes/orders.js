// Generated by CoffeeScript 1.9.3
(function() {
  var MarketHelper, app, auth, marketStats, request, walletsEngine;

  require("./../../helpers/spec_helper");

  marketStats = require('./../../../models/seeds/market_stats');

  MarketHelper = require("./../../../lib/market_helper");

  auth = require("./../../helpers/auth_helper");

  app = require("./../../../app");

  walletsEngine = require("./../../../core_api");

  request = require("supertest");

  beforeEach(function(done) {
    return GLOBAL.db.sequelize.sync({
      force: true
    }).complete(function() {
      return GLOBAL.db.sequelize.query("TRUNCATE TABLE " + GLOBAL.db.MarketStats.tableName).complete(function() {
        return GLOBAL.db.MarketStats.bulkCreate(marketStats).complete(function() {
          return done();
        });
      });
    });
  });

  describe("Orders Routes", function() {
    return describe("POST /orders", function() {
      var orderData;
      orderData = {
        amount: 5,
        buy_currency: "LTC",
        sell_currency: "BTC",
        unit_price: 0.01,
        type: "limit",
        action: "buy"
      };
      describe("when the user is not logged in", function() {
        return it("returns 409", function(done) {
          return request(GLOBAL.appConfig().app_host).post("/orders").send(orderData).expect(409).expect({
            "error": "You need to be logged in to place an order."
          }, done);
        });
      });
      return describe("when the user is logged in", function() {
        describe("when the user is not verified", function() {
          return it("returns 409", function(done) {
            return auth.login({
              email_verified: false
            }, function(err, cookie) {
              return request(GLOBAL.appConfig().app_host).post("/orders").set("cookie", cookie).send(orderData).expect(409).expect({
                error: "Sorry, but you can not trade. Did you verify your account?"
              }, done);
            });
          });
        });
        return describe("when the user is verified", function() {
          describe("when the wallet doesn't have enough funds", function() {
            return it("returns 409", function(done) {
              return auth.login(function(err, cookie) {
                return request(GLOBAL.appConfig().app_host).post("/orders").set("cookie", cookie).send(orderData).expect(409).expect({
                  error: "Not enough BTC to open an order."
                }, done);
              });
            });
          });
          return describe("when the wallet has enough funds", function() {
            it("returns 200 and the new order", function(done) {
              return auth.login(function(err, cookie, user) {
                return GLOBAL.db.Wallet.findOrCreateUserWalletByCurrency(user.id, "BTC", function(err, wallet) {
                  return wallet.addBalance(MarketHelper.toBigint(0.05), null, function() {
                    var resultData;
                    resultData = {
                      id: 1,
                      type: 'limit',
                      action: 'buy',
                      buy_currency: 'LTC',
                      sell_currency: 'BTC',
                      amount: 5,
                      matched_amount: 0,
                      result_amount: 0,
                      fee: 0,
                      unit_price: 0.01,
                      status: 'open',
                      in_queue: true,
                      published: false
                    };
                    return request(GLOBAL.appConfig().app_host).post("/orders").set("cookie", cookie).send(orderData).expect(200).end(function(err, res) {
                      resultData.updated_at = res.body.updated_at;
                      resultData.created_at = res.body.created_at;
                      res.body.should.eql(resultData);
                      return done();
                    });
                  });
                });
              });
            });
            it("puts the balance on hold", function(done) {
              return auth.login(function(err, cookie, user) {
                return GLOBAL.db.Wallet.findOrCreateUserWalletByCurrency(user.id, "BTC", function(err, wallet) {
                  return wallet.addBalance(MarketHelper.toBigint(0.05), null, function() {
                    return request(GLOBAL.appConfig().app_host).post("/orders").set("cookie", cookie).send(orderData).end(function(err, res) {
                      return GLOBAL.db.Wallet.findUserWalletByCurrency(user.id, "BTC", function(err, wallet) {
                        wallet.hold_balance.should.eql(MarketHelper.toBigint(0.05));
                        return done();
                      });
                    });
                  });
                });
              });
            });
            it("decreases the balance", function(done) {
              return auth.login(function(err, cookie, user) {
                return GLOBAL.db.Wallet.findOrCreateUserWalletByCurrency(user.id, "BTC", function(err, wallet) {
                  return wallet.addBalance(MarketHelper.toBigint(0.05), null, function() {
                    return request(GLOBAL.appConfig().app_host).post("/orders").set("cookie", cookie).send(orderData).end(function(err, res) {
                      return GLOBAL.db.Wallet.findUserWalletByCurrency(user.id, "BTC", function(err, wallet) {
                        wallet.balance.should.eql(0);
                        return done();
                      });
                    });
                  });
                });
              });
            });
            xit("publishes a order", function(done) {
              return auth.login(function(err, cookie, user) {
                return GLOBAL.db.Wallet.findOrCreateUserWalletByCurrency(user.id, "BTC", function(err, wallet) {
                  return wallet.addBalance(MarketHelper.toBigint(0.05), null, function() {
                    return request(GLOBAL.appConfig().app_host).post("/orders").set("cookie", cookie).send(orderData).end(function(err, res) {
                      return GLOBAL.db.Order.find(1).complete(function(err, order) {
                        order.published.should.eql(true);
                        return done();
                      });
                    });
                  });
                });
              });
            });
            return it("opens the order", function(done) {
              return auth.login(function(err, cookie, user) {
                return GLOBAL.db.Wallet.findOrCreateUserWalletByCurrency(user.id, "BTC", function(err, wallet) {
                  return wallet.addBalance(MarketHelper.toBigint(0.05), null, function() {
                    return request(GLOBAL.appConfig().app_host).post("/orders").set("cookie", cookie).send(orderData).end(function(err, res) {
                      return GLOBAL.db.Order.find(1).complete(function(err, order) {
                        order.status.should.eql("open");
                        return done();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

}).call(this);
