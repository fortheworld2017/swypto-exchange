// Generated by CoffeeScript 1.10.0
(function() {
  var MarketHelper, app, marketStats, request;

  require("./../../../helpers/spec_helper");

  marketStats = require('./../../../../models/seeds/market_stats');

  MarketHelper = require("./../../../../lib/market_helper");

  app = require("./../../../../core_api");

  request = require("supertest");

  describe("Transactions Api", function() {
    var wallet;
    wallet = void 0;
    beforeEach(function(done) {
      return GLOBAL.db.sequelize.sync({
        force: true
      }).complete(function() {
        return GLOBAL.db.sequelize.query("TRUNCATE TABLE " + GLOBAL.db.MarketStats.tableName).complete(function() {
          return GLOBAL.db.MarketStats.bulkCreate(marketStats).success(function() {
            return GLOBAL.db.Wallet.create({
              currency: "BTC",
              user_id: 1,
              address: "address"
            }).complete(function(err, wl) {
              wallet = wl;
              return done();
            });
          });
        });
      });
    });
    describe("PUT /transaction/:currency/:tx_id", function() {
      return describe("When there is a valid currency and tx id", function() {
        it("returns 200 ok", function(done) {
          return request('http://localhost:6000').put("/transaction/BTC/1").send().expect(200).end(function(e, res) {
            if (res == null) {
              res = {};
            }
            if (e) {
              throw e;
            }
            res.body.should.endWith("- Added transaction 1 BTC");
            return done();
          });
        });
        return describe("when the category is not move", function() {
          it("adds the transaction in the db", function(done) {
            return request('http://localhost:6000').put("/transaction/BTC/1").send().expect(200).end(function(e, res) {
              if (res == null) {
                res = {};
              }
              if (e) {
                throw e;
              }
              return GLOBAL.db.Transaction.find({
                where: {
                  txid: "unique_tx_id"
                }
              }).complete(function(err, tx) {
                tx.address.should.eql("address");
                return done();
              });
            });
          });
          return it("loads the transaction amount to the wallet", function(done) {
            return request('http://localhost:6000').put("/transaction/BTC/1").send().expect(200).expect({}, function() {
              return GLOBAL.db.Wallet.findById(wallet.id, function(err, wl) {
                wl.balance.should.eql(MarketHelper.toBigint(1));
                return done();
              });
            });
          });
        });
      });
    });
    describe("POST /load_latest_transactions/:currency", function() {
      return describe("When there is a valid currency and tx id", function() {
        return it("returns 200 ok", function(done) {
          return request('http://localhost:6000').post("/load_latest_transactions/BTC").send().expect(200).end(function(e, res) {
            if (res == null) {
              res = {};
            }
            if (e) {
              throw e;
            }
            res.body.should.endWith("- Processed 1 transactions");
            return done();
          });
        });
      });
    });
    describe("POST /process_pending_payments", function() {
      describe("when the wallet has enough balance", function() {
        it("returns 200 ok and the executed payment ids", function(done) {
          return GLOBAL.db.Transaction.create({
            amount: MarketHelper.toBigint(20.0002),
            category: "receive",
            currency: "BTC",
            user_id: 1,
            wallet_id: 1,
            balance_loaded: true
          }).complete(function() {
            wallet.balance = MarketHelper.toBigint(10);
            return wallet.save().complete(function() {
              return GLOBAL.db.Payment.create({
                user_id: 1,
                wallet_id: wallet.id,
                amount: MarketHelper.toBigint(10),
                fee: MarketHelper.toBigint(0.0002),
                currency: "BTC",
                address: "mrLpnPMsKR8oFqRRYA28y4Txu98TUNQzVw"
              }).complete(function(err, pm) {
                return request('http://localhost:6000').post("/process_pending_payments").send().expect(200).end(function(e, res) {
                  if (res == null) {
                    res = {};
                  }
                  if (e) {
                    throw e;
                  }
                  res.body.should.endWith(pm.id + " - processed");
                  return GLOBAL.db.Payment.findById(pm.id, function(e, p) {
                    p.status.should.eql("processed");
                    return done();
                  });
                });
              });
            });
          });
        });
        return it("updates the user_id from the payment", function(done) {
          return GLOBAL.db.Transaction.create({
            amount: MarketHelper.toBigint(20.0002),
            category: "receive",
            currency: "BTC",
            user_id: 1,
            wallet_id: 1,
            balance_loaded: true
          }).complete(function() {
            wallet.balance = MarketHelper.toBigint(10);
            return wallet.save().complete(function() {
              return GLOBAL.db.Transaction.create({
                wallet_id: wallet.id,
                currency: "BTC",
                txid: "unique_tx_id_mrLpnPMsKR8oFqRRYA28y4Txu98TUNQzVw"
              }).complete(function(err, tx) {
                return GLOBAL.db.Payment.create({
                  wallet_id: wallet.id,
                  user_id: 1,
                  amount: MarketHelper.toBigint(10),
                  fee: MarketHelper.toBigint(0.0002),
                  currency: "BTC",
                  address: "mrLpnPMsKR8oFqRRYA28y4Txu98TUNQzVw"
                }).complete(function(err, pm) {
                  return request('http://localhost:6000').post("/process_pending_payments").send().expect(200).end(function() {
                    return GLOBAL.db.Transaction.findById(tx.id, function(e, t) {
                      t.user_id.should.eql(1);
                      return done();
                    });
                  });
                });
              });
            });
          });
        });
      });
      return describe("when there are payments for the same user", function() {
        return it("processes only one payment", function(done) {
          return GLOBAL.db.Transaction.create({
            amount: MarketHelper.toBigint(20.0004),
            category: "receive",
            currency: "BTC",
            user_id: 1,
            wallet_id: 1,
            balance_loaded: true
          }).complete(function() {
            return GLOBAL.db.Transaction.create({
              amount: MarketHelper.toBigint(10.0002),
              category: "receive",
              currency: "BTC",
              user_id: 2,
              wallet_id: 2,
              balance_loaded: true
            }).complete(function() {
              return GLOBAL.db.Wallet.create({
                currency: "BTC",
                user_id: 2,
                balance: 0
              }).complete(function(err, wallet2) {
                wallet.balance = MarketHelper.toBigint(10);
                return wallet.save().complete(function() {
                  return GLOBAL.db.Payment.create({
                    user_id: 1,
                    wallet_id: wallet.id,
                    amount: MarketHelper.toBigint(5),
                    fee: MarketHelper.toBigint(0.0002),
                    currency: "BTC",
                    address: "mrLpnPMsKR8oFqRRYA28y4Txu98TUNQzVa"
                  }).complete(function(err, pm) {
                    return GLOBAL.db.Payment.create({
                      user_id: 1,
                      wallet_id: wallet.id,
                      amount: MarketHelper.toBigint(5),
                      fee: MarketHelper.toBigint(0.0002),
                      currency: "BTC",
                      address: "mrLpnPMsKR8oFqRRYA28y4Txu98TUNQzVb"
                    }).complete(function(err2, pm2) {
                      return GLOBAL.db.Payment.create({
                        user_id: 2,
                        wallet_id: wallet2.id,
                        amount: MarketHelper.toBigint(10),
                        fee: MarketHelper.toBigint(0.0002),
                        currency: "BTC",
                        address: "mrLpnPMsKR8oFqRRYA28y4Txu98TUNQzVc"
                      }).complete(function(err3, pm3) {
                        return request('http://localhost:6000').post("/process_pending_payments").send().expect(200).end(function(e, res) {
                          if (res == null) {
                            res = {};
                          }
                          if (e) {
                            throw e;
                          }
                          res.body.should.endWith(pm.id + " - processed," + pm2.id + " - user already had a processed payment," + pm3.id + " - processed");
                          return GLOBAL.db.Payment.findById(pm.id, function(e, p1) {
                            return GLOBAL.db.Payment.findById(pm2.id, function(e, p2) {
                              return GLOBAL.db.Payment.findById(pm3.id, function(e, p3) {
                                [p1.status, p2.status, p3.status].toString().should.eql("processed,pending,processed");
                                return done();
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
    return describe("DELETE /cancel_payment/:payment_id", function() {
      it("returns 200 ok and the removed payment id", function(done) {
        wallet.balance = 0;
        return wallet.save().complete(function() {
          return GLOBAL.db.Payment.create({
            user_id: 1,
            wallet_id: wallet.id,
            amount: MarketHelper.toBigint(10),
            currency: "BTC",
            address: "mrLpnPMsKR8oFqRRYA28y4Txu98TUNQzVw"
          }).complete(function(err, pm) {
            var paymentId;
            paymentId = pm.id;
            return request('http://localhost:6000').del("/cancel_payment/" + paymentId).send().expect(200).end(done);
          });
        });
      });
      it("deletes the payment", function(done) {
        wallet.balance = 0;
        return wallet.save().complete(function() {
          return GLOBAL.db.Payment.create({
            user_id: 1,
            wallet_id: wallet.id,
            amount: MarketHelper.toBigint(10),
            currency: "BTC",
            address: "mrLpnPMsKR8oFqRRYA28y4Txu98TUNQzVw"
          }).complete(function(err, pm) {
            var paymentId;
            paymentId = pm.id;
            return request('http://localhost:6000').del("/cancel_payment/" + paymentId).send().expect(200).end(function(e, res) {
              if (res == null) {
                res = {};
              }
              if (e) {
                throw e;
              }
              return GLOBAL.db.Payment.findAndCountAll({
                where: {
                  id: paymentId
                }
              }).complete(function(err, result) {
                result.count.should.eql(0);
                return done();
              });
            });
          });
        });
      });
      return it("refunds the user wallet adding the transaction fee", function(done) {
        wallet.balance = 0;
        return wallet.save().complete(function() {
          return GLOBAL.db.Payment.create({
            user_id: 1,
            wallet_id: wallet.id,
            amount: MarketHelper.toBigint(10),
            currency: "BTC",
            address: "mrLpnPMsKR8oFqRRYA28y4Txu98TUNQzVw"
          }).complete(function(err, pm) {
            var paymentId, totalWithdrawalAmount;
            paymentId = pm.id;
            totalWithdrawalAmount = wallet.withdrawal_fee + pm.amount;
            return request('http://localhost:6000').del("/cancel_payment/" + paymentId).send().expect(200).end(function(e, res) {
              if (res == null) {
                res = {};
              }
              if (e) {
                throw e;
              }
              return GLOBAL.db.Wallet.find(wallet.id).complete(function(err, wallet) {
                wallet.balance.should.eql(totalWithdrawalAmount);
                return done();
              });
            });
          });
        });
      });
    });
  });

}).call(this);
