// Generated by CoffeeScript 1.9.3
(function() {
  var Emailer, MarketHelper, ipFormatter, math;

  MarketHelper = require("../lib/market_helper");

  ipFormatter = require("ip");

  math = require("../lib/math");

  Emailer = require("../lib/emailer");

  module.exports = function(sequelize, DataTypes) {
    var BankWithdrawal;
    BankWithdrawal = sequelize.define('BankWithdrawal', {
      name: DataTypes.STRING,
      email: DataTypes.STRING,
      currency: {
        type: DataTypes.INTEGER.UNSIGNED,
        get: function() {
          return MarketHelper.getCurrencyLiteral(this.getDataValue("currency"));
        },
        set: function(currency) {
          return this.setDataValue("currency", MarketHelper.getCurrency(currency));
        }
      },
      wallet_id: DataTypes.INTEGER.UNSIGNED,
      user_id: DataTypes.INTEGER.UNSIGNED,
      fraud: DataTypes.BOOLEAN,
      remote_ip: DataTypes.STRING(16),
      amount: DataTypes.BIGINT(20),
      fee: DataTypes.BIGINT(20),
      iban: DataTypes.STRING,
      bic_swift: DataTypes.STRING,
      address: DataTypes.STRING,
      postalcode: DataTypes.STRING,
      city: DataTypes.STRING,
      country: DataTypes.STRING,
      comment: DataTypes.STRING,
      bank_name: DataTypes.STRING,
      bank_address: DataTypes.STRING,
      bank_postalcode: DataTypes.STRING,
      bank_city: DataTypes.STRING,
      bank_country: DataTypes.STRING,
      type: DataTypes.INTEGER(1),
      status: DataTypes.INTEGER(1),
      is_mail_sent: DataTypes.BOOLEAN,
      bank_currency: DataTypes.STRING
    }, {
      tableName: 'bank_withdrawals',
      classMethods: {
        findById: function(id, callback) {
          return BankWithdrawal.find(id).complete(callback);
        },
        findByUserAndWallet: function(userId, walletId, status, callback) {
          var query;
          query = {
            where: {
              user_id: userId,
              wallet_id: walletId,
              status: MarketHelper.getPaymentStatus(status)
            }
          };
          return BankWithdrawal.findAll(query).complete(callback);
        }
      },
      instanceMethods: {
        getFloat: function(attribute) {
          if (this[attribute] == null) {
            return this[attribute];
          }
          return MarketHelper.fromBigint(this[attribute]);
        },
        isProcessed: function() {
          return this.status === "processed";
        },
        isCanceled: function() {
          return this.status === "canceled";
        },
        isPending: function() {
          return this.status === "pending";
        },
        process: function(response, callback) {
          if (callback == null) {
            callback = function() {};
          }
          this.status = "2";
          this.id = response;
          return this.save().complete(callback);
        },
        getTypeLiteral: function() {
          return MarketHelper.getBankWithdrawalTypeLiteralForExport(this.type);
        }
      },
      classMethods: {
        findById: function(id, callback) {
          return BankWithdrawal.find(id).complete(callback);
        },
        findByIdWithUserDetails: function(id, callback) {
          var query;
          query = {
            where: {
              id: id
            },
            order: [["created_at", "ASC"]],
            include: [
              {
                model: GLOBAL.db.User,
                attributes: ["username", "email"]
              }
            ]
          };
          return BankWithdrawal.findAll(query).complete(callback);
        },
        findByTypeAndStatus: function(status, userId, type, callback) {
          var query;
          query = {
            where: {
              user_id: userId,
              status: MarketHelper.getBankWithdrawalStatus(status)
            },
            order: [["created_at", "ASC"]]
          };
          if (type !== 'All') {
            query.where.type = MarketHelper.getBankWithdrawalType(type);
          }
          return BankWithdrawal.findAll(query).complete(callback);
        },
        findNonProcessedById: function(id, callback) {
          return BankWithdrawal.find({
            where: {
              id: id,
              status: MarketHelper.getBankWithdrawalStatus("pending")
            }
          }).complete(callback);
        },
        findByUserAndWallet: function(userId, walletId, status, callback) {
          var query;
          query = {
            where: {
              user_id: userId,
              wallet_id: walletId,
              status: MarketHelper.getBankWithdrawalStatus(status)
            }
          };
          return BankWithdrawal.findAll(query).complete(callback);
        },
        findToProcess: function(callback) {
          var query;
          query = {
            where: {
              status: MarketHelper.getBankWithdrawalStatus("processed")
            },
            order: [["created_at", "ASC"]]
          };
          return BankWithdrawal.findAll(query).complete(callback);
        },
        findByUserAndStatus: function(userId, status, callback) {
          var query;
          query = {
            where: {
              user_id: userId,
              status: MarketHelper.getBankWithdrawalStatus(status)
            }
          };
          return BankWithdrawal.findAll(query).complete(callback);
        },
        findByStatus: function(status, callback) {
          var query;
          query = {
            where: {
              status: MarketHelper.getBankWithdrawalStatus(status)
            },
            order: [["created_at", "ASC"]]
          };
          return BankWithdrawal.findAll(query).complete(callback);
        },
        findTotalPayedByUserAndWallet: function(userId, walletId, callback) {
          var query;
          query = {
            where: {
              user_id: userId,
              wallet_id: walletId
            }
          };
          return BankWithdrawal.sum("amount", query).complete(function(err, totalAmount) {
            if (totalAmount == null) {
              totalAmount = 0;
            }
            if (err) {
              return err;
            }
            return BankWithdrawal.sum("fee", query).complete(function(err, totalFee) {
              if (totalFee == null) {
                totalFee = 0;
              }
              if (err) {
                return err;
              }
              return callback(err, parseInt(math.add(MarketHelper.toBignum(totalAmount), MarketHelper.toBignum(totalFee))));
            });
          });
        },
        sendWithdrawalMail: function(data, callback) {
          var emailer, options;
          if (callback == null) {
            callback = function() {};
          }
          console.log("Hello  here and there");
          console.log(data);
          data = {
            "email": data.email,
            "name": data.name,
            "amount": data.amount,
            "address": data.address,
            "currency": data.currency,
            "iban": data.iban,
            "bic_swift": data.bic_swift,
            "postalcode": data.postalcode,
            "city": data.city,
            "country": data.country
          };
          options = {
            to: {
              email: GLOBAL.appConfig().alert_emails
            },
            subject: "New Bank Withdrawal Request",
            template: "bank_withdrawal"
          };
          emailer = new Emailer(options, data);
          emailer.send(function(err, result) {
            if (err) {
              return console.error(err);
            }
          });
          return callback();
        },
        submit: function(data, callback) {
          if (callback == null) {
            callback = function() {};
          }
          return GLOBAL.coreAPIClient.sendWithData("create_bank_withdrawal", data, (function(_this) {
            return function(err, res, body) {
              if (err) {
                console.error(err);
                return callback(err, res, body);
              }
              if (body && body.id) {
                return BankWithdrawal.findById(body.id, callback);
              }
              console.error("Could not create payment - " + (JSON.stringify(body)));
              return callback(body);
            };
          })(this));
        }
      }
    });
    return BankWithdrawal;
  };

}).call(this);
